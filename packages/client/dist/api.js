"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * @algotia/server-2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.TradeTakerOrMakerEnum = exports.TradeSideEnum = exports.StrategyMetaDataLanguageEnum = exports.OrderSideEnum = exports.OrderStatusEnum = exports.FeeTypeEnum = exports.ExchangeID = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
var ExchangeID;
(function (ExchangeID) {
    ExchangeID["Binance"] = "binance";
    ExchangeID["Kucoin"] = "kucoin";
    ExchangeID["Bitfinex"] = "bitfinex";
})(ExchangeID = exports.ExchangeID || (exports.ExchangeID = {}));
/**
    * @export
    * @enum {string}
    */
var FeeTypeEnum;
(function (FeeTypeEnum) {
    FeeTypeEnum["Taker"] = "taker";
    FeeTypeEnum["Maker"] = "maker";
})(FeeTypeEnum = exports.FeeTypeEnum || (exports.FeeTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderStatusEnum;
(function (OrderStatusEnum) {
    OrderStatusEnum["Open"] = "open";
    OrderStatusEnum["Closed"] = "closed";
    OrderStatusEnum["Canceled"] = "canceled";
})(OrderStatusEnum = exports.OrderStatusEnum || (exports.OrderStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var OrderSideEnum;
(function (OrderSideEnum) {
    OrderSideEnum["Buy"] = "buy";
    OrderSideEnum["Sell"] = "sell";
})(OrderSideEnum = exports.OrderSideEnum || (exports.OrderSideEnum = {}));
/**
    * @export
    * @enum {string}
    */
var StrategyMetaDataLanguageEnum;
(function (StrategyMetaDataLanguageEnum) {
    StrategyMetaDataLanguageEnum["JavaScript"] = "JavaScript";
    StrategyMetaDataLanguageEnum["TypeScript"] = "TypeScript";
})(StrategyMetaDataLanguageEnum = exports.StrategyMetaDataLanguageEnum || (exports.StrategyMetaDataLanguageEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TradeSideEnum;
(function (TradeSideEnum) {
    TradeSideEnum["Buy"] = "buy";
    TradeSideEnum["Sell"] = "sell";
})(TradeSideEnum = exports.TradeSideEnum || (exports.TradeSideEnum = {}));
/**
    * @export
    * @enum {string}
    */
var TradeTakerOrMakerEnum;
(function (TradeTakerOrMakerEnum) {
    TradeTakerOrMakerEnum["Taker"] = "taker";
    TradeTakerOrMakerEnum["Maker"] = "maker";
})(TradeTakerOrMakerEnum = exports.TradeTakerOrMakerEnum || (exports.TradeTakerOrMakerEnum = {}));
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateBacktestOptions} createBacktestOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBacktest: (createBacktestOptions, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createBacktestOptions' is not null or undefined
            if (createBacktestOptions === null || createBacktestOptions === undefined) {
                throw new base_1.RequiredError('createBacktestOptions', 'Required parameter createBacktestOptions was null or undefined when calling createBacktest.');
            }
            const localVarPath = `/backtest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const nonString = typeof createBacktestOptions !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(createBacktestOptions !== undefined ? createBacktestOptions : {})
                : (createBacktestOptions || "");
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConfigOptions: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {'port' | 'appDir'} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigOptionByKey: (key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new base_1.RequiredError('key', 'Required parameter key was null or undefined when calling getConfigOptionByKey.');
            }
            const localVarPath = `/config/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeIds: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/exchange/ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeStatuses: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/exchange/statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ExchangeID} id
         * @param {string} pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarket: (id, pair, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getMarket.');
            }
            // verify required parameter 'pair' is not null or undefined
            if (pair === null || pair === undefined) {
                throw new base_1.RequiredError('pair', 'Required parameter pair was null or undefined when calling getMarket.');
            }
            const localVarPath = `/exchange/{id}/market`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (pair !== undefined) {
                localVarQueryParameter['pair'] = pair;
            }
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ExchangeID} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPairs: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getPairs.');
            }
            const localVarPath = `/exchange/{id}/pairs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyByFilename: (fileName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new base_1.RequiredError('fileName', 'Required parameter fileName was null or undefined when calling getStrategyByFilename.');
            }
            const localVarPath = `/strategy/{fileName}`
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ExchangeID} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeFrames: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling getTimeFrames.');
            }
            const localVarPath = `/exchange/{id}/timeframes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateBacktestOptions} createBacktestOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBacktest(createBacktestOptions, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).createBacktest(createBacktestOptions, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConfigOptions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getAllConfigOptions(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {'port' | 'appDir'} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigOptionByKey(key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getConfigOptionByKey(key, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeIds(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getExchangeIds(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeStatuses(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getExchangeStatuses(options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {ExchangeID} id
         * @param {string} pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarket(id, pair, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getMarket(id, pair, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {ExchangeID} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPairs(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getPairs(id, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyByFilename(fileName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getStrategyByFilename(fileName, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
        /**
         *
         * @param {ExchangeID} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeFrames(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield exports.DefaultApiAxiosParamCreator(configuration).getTimeFrames(id, options);
                return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                    const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                    return axios.request(axiosRequestArgs);
                };
            });
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {CreateBacktestOptions} createBacktestOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBacktest(createBacktestOptions, options) {
            return exports.DefaultApiFp(configuration).createBacktest(createBacktestOptions, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConfigOptions(options) {
            return exports.DefaultApiFp(configuration).getAllConfigOptions(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {'port' | 'appDir'} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigOptionByKey(key, options) {
            return exports.DefaultApiFp(configuration).getConfigOptionByKey(key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeIds(options) {
            return exports.DefaultApiFp(configuration).getExchangeIds(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeStatuses(options) {
            return exports.DefaultApiFp(configuration).getExchangeStatuses(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ExchangeID} id
         * @param {string} pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarket(id, pair, options) {
            return exports.DefaultApiFp(configuration).getMarket(id, pair, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ExchangeID} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPairs(id, options) {
            return exports.DefaultApiFp(configuration).getPairs(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyByFilename(fileName, options) {
            return exports.DefaultApiFp(configuration).getStrategyByFilename(fileName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ExchangeID} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeFrames(id, options) {
            return exports.DefaultApiFp(configuration).getTimeFrames(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @param {CreateBacktestOptions} createBacktestOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createBacktest(createBacktestOptions, options) {
        return exports.DefaultApiFp(this.configuration).createBacktest(createBacktestOptions, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAllConfigOptions(options) {
        return exports.DefaultApiFp(this.configuration).getAllConfigOptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {'port' | 'appDir'} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getConfigOptionByKey(key, options) {
        return exports.DefaultApiFp(this.configuration).getConfigOptionByKey(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getExchangeIds(options) {
        return exports.DefaultApiFp(this.configuration).getExchangeIds(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getExchangeStatuses(options) {
        return exports.DefaultApiFp(this.configuration).getExchangeStatuses(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ExchangeID} id
     * @param {string} pair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMarket(id, pair, options) {
        return exports.DefaultApiFp(this.configuration).getMarket(id, pair, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPairs(id, options) {
        return exports.DefaultApiFp(this.configuration).getPairs(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStrategyByFilename(fileName, options) {
        return exports.DefaultApiFp(this.configuration).getStrategyByFilename(fileName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTimeFrames(id, options) {
        return exports.DefaultApiFp(this.configuration).getTimeFrames(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;

/**
 * @algotia/server-2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Balance
 */
export interface Balance {
    /**
     *
     * @type {number}
     * @memberof Balance
     */
    free: number;
    /**
     *
     * @type {number}
     * @memberof Balance
     */
    used: number;
    /**
     *
     * @type {number}
     * @memberof Balance
     */
    total: number;
}
/**
 *
 * @export
 * @interface Balances
 */
export interface Balances {
    /**
     *
     * @type {any}
     * @memberof Balances
     */
    info: any | null;
}
/**
 *
 * @export
 * @interface CreateBacktestOptions
 */
export interface CreateBacktestOptions {
    /**
     *
     * @type {string}
     * @memberof CreateBacktestOptions
     */
    strategyPath: string;
    /**
     *
     * @type {ExchangeID}
     * @memberof CreateBacktestOptions
     */
    exchange: ExchangeID;
    /**
     *
     * @type {string}
     * @memberof CreateBacktestOptions
     */
    period: string;
    /**
     *
     * @type {string}
     * @memberof CreateBacktestOptions
     */
    pair: string;
    /**
     *
     * @type {number}
     * @memberof CreateBacktestOptions
     */
    from: number;
    /**
     *
     * @type {number}
     * @memberof CreateBacktestOptions
     */
    to: number;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof CreateBacktestOptions
     */
    initialBalance: {
        [key: string]: number;
    };
}
/**
 *
 * @export
 * @interface CreateBacktestResult
 */
export interface CreateBacktestResult {
    /**
     *
     * @type {PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice}
     * @memberof CreateBacktestResult
     */
    results: PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice;
    /**
     *
     * @type {Array<OHLCVCandle>}
     * @memberof CreateBacktestResult
     */
    candles: Array<OHLCVCandle>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ExchangeID {
    Binance = "binance",
    Kucoin = "kucoin",
    Bitfinex = "bitfinex"
}
/**
 *
 * @export
 * @interface Fee
 */
export interface Fee {
    /**
     *
     * @type {string}
     * @memberof Fee
     */
    type: FeeTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Fee
     */
    currency: string;
    /**
     *
     * @type {number}
     * @memberof Fee
     */
    rate: number;
    /**
     *
     * @type {number}
     * @memberof Fee
     */
    cost: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum FeeTypeEnum {
    Taker = "taker",
    Maker = "maker"
}
/**
 *
 * @export
 * @interface GetStrategyResult
 */
export interface GetStrategyResult {
    /**
     *
     * @type {string}
     * @memberof GetStrategyResult
     */
    value: string;
    /**
     *
     * @type {StrategyMetaData}
     * @memberof GetStrategyResult
     */
    meta: StrategyMetaData;
}
/**
 *
 * @export
 * @interface Market
 */
export interface Market {
    /**
     *
     * @type {string}
     * @memberof Market
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Market
     */
    symbol: string;
    /**
     *
     * @type {string}
     * @memberof Market
     */
    base: string;
    /**
     *
     * @type {string}
     * @memberof Market
     */
    quote: string;
    /**
     *
     * @type {string}
     * @memberof Market
     */
    baseId: string;
    /**
     *
     * @type {string}
     * @memberof Market
     */
    quoteId: string;
    /**
     *
     * @type {string}
     * @memberof Market
     */
    type?: string;
    /**
     *
     * @type {boolean}
     * @memberof Market
     */
    spot?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Market
     */
    margin?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Market
     */
    swap?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Market
     */
    future?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Market
     */
    active: boolean;
    /**
     *
     * @type {MarketPrecision}
     * @memberof Market
     */
    precision: MarketPrecision;
    /**
     *
     * @type {MarketLimits}
     * @memberof Market
     */
    limits: MarketLimits;
    /**
     *
     * @type {boolean}
     * @memberof Market
     */
    tierBased: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Market
     */
    percentage: boolean;
    /**
     *
     * @type {number}
     * @memberof Market
     */
    taker: number;
    /**
     *
     * @type {number}
     * @memberof Market
     */
    maker: number;
    /**
     *
     * @type {any}
     * @memberof Market
     */
    info: any | null;
}
/**
 *
 * @export
 * @interface MarketLimits
 */
export interface MarketLimits {
    /**
     *
     * @type {MinMax}
     * @memberof MarketLimits
     */
    cost?: MinMax;
    /**
     *
     * @type {MinMax}
     * @memberof MarketLimits
     */
    price: MinMax;
    /**
     *
     * @type {MinMax}
     * @memberof MarketLimits
     */
    amount: MinMax;
}
/**
 *
 * @export
 * @interface MarketPrecision
 */
export interface MarketPrecision {
    /**
     *
     * @type {number}
     * @memberof MarketPrecision
     */
    price: number;
    /**
     *
     * @type {number}
     * @memberof MarketPrecision
     */
    amount: number;
    /**
     *
     * @type {number}
     * @memberof MarketPrecision
     */
    quote: number;
    /**
     *
     * @type {number}
     * @memberof MarketPrecision
     */
    base: number;
}
/**
 *
 * @export
 * @interface MinMax
 */
export interface MinMax {
    /**
     *
     * @type {number}
     * @memberof MinMax
     */
    min: number;
    /**
     *
     * @type {number}
     * @memberof MinMax
     */
    max: number | null;
}
/**
 *
 * @export
 * @interface OHLCVCandle
 */
export interface OHLCVCandle {
    /**
     *
     * @type {number}
     * @memberof OHLCVCandle
     */
    timestamp: number;
    /**
     *
     * @type {number}
     * @memberof OHLCVCandle
     */
    open: number;
    /**
     *
     * @type {number}
     * @memberof OHLCVCandle
     */
    high: number;
    /**
     *
     * @type {number}
     * @memberof OHLCVCandle
     */
    low: number;
    /**
     *
     * @type {number}
     * @memberof OHLCVCandle
     */
    close: number;
    /**
     *
     * @type {number}
     * @memberof OHLCVCandle
     */
    volume: number;
}
/**
 *
 * @export
 * @interface Order
 */
export interface Order {
    /**
     *
     * @type {string}
     * @memberof Order
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    clientOrderId: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    datetime: string;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    timestamp: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    lastTradeTimestamp: number;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    status: OrderStatusEnum;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    symbol: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    timeInForce?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    side: OrderSideEnum;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    price: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    average?: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    amount: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    filled: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    remaining: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    cost: number;
    /**
     *
     * @type {Array<Trade>}
     * @memberof Order
     */
    trades: Array<Trade>;
    /**
     *
     * @type {Fee}
     * @memberof Order
     */
    fee: Fee;
    /**
     *
     * @type {any}
     * @memberof Order
     */
    info: any | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OrderStatusEnum {
    Open = "open",
    Closed = "closed",
    Canceled = "canceled"
}
/**
    * @export
    * @enum {string}
    */
export declare enum OrderSideEnum {
    Buy = "buy",
    Sell = "sell"
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice
 */
export interface PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice {
    /**
     *
     * @type {Balances}
     * @memberof PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice
     */
    balance: Balances;
    /**
     *
     * @type {Array<Order>}
     * @memberof PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice
     */
    openOrders: Array<Order>;
    /**
     *
     * @type {Array<Order>}
     * @memberof PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice
     */
    closedOrders: Array<Order>;
    /**
     *
     * @type {Array<StrategyError>}
     * @memberof PickSimulatedExchangeStoreExcludeKeyofSimulatedExchangeStoreCurrentTimeOrCurrentPrice
     */
    errors: Array<StrategyError>;
}
/**
 * Construct a type with a set of properties K of type T
 * @export
 * @interface RecordExchangeIDBoolean
 */
export interface RecordExchangeIDBoolean {
    /**
     *
     * @type {boolean}
     * @memberof RecordExchangeIDBoolean
     */
    binance?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RecordExchangeIDBoolean
     */
    kucoin?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RecordExchangeIDBoolean
     */
    bitfinex?: boolean;
}
/**
 *
 * @export
 * @interface StrategyError
 */
export interface StrategyError {
    /**
     *
     * @type {number}
     * @memberof StrategyError
     */
    timestamp: number;
    /**
     *
     * @type {string}
     * @memberof StrategyError
     */
    message: string;
    /**
     *
     * @type {Balances}
     * @memberof StrategyError
     */
    balance: Balances;
}
/**
 *
 * @export
 * @interface StrategyMetaData
 */
export interface StrategyMetaData {
    /**
     *
     * @type {number}
     * @memberof StrategyMetaData
     */
    modifiedAt: number;
    /**
     *
     * @type {string}
     * @memberof StrategyMetaData
     */
    basename: string;
    /**
     *
     * @type {string}
     * @memberof StrategyMetaData
     */
    path: string;
    /**
     *
     * @type {string}
     * @memberof StrategyMetaData
     */
    language: StrategyMetaDataLanguageEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum StrategyMetaDataLanguageEnum {
    JavaScript = "JavaScript",
    TypeScript = "TypeScript"
}
/**
 *
 * @export
 * @interface Trade
 */
export interface Trade {
    /**
     *
     * @type {number}
     * @memberof Trade
     */
    amount: number;
    /**
     *
     * @type {string}
     * @memberof Trade
     */
    datetime: string;
    /**
     *
     * @type {string}
     * @memberof Trade
     */
    id: string;
    /**
     *
     * @type {any}
     * @memberof Trade
     */
    info: any | null;
    /**
     *
     * @type {string}
     * @memberof Trade
     */
    order?: string;
    /**
     *
     * @type {number}
     * @memberof Trade
     */
    price: number;
    /**
     *
     * @type {number}
     * @memberof Trade
     */
    timestamp: number;
    /**
     *
     * @type {string}
     * @memberof Trade
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof Trade
     */
    side: TradeSideEnum;
    /**
     *
     * @type {string}
     * @memberof Trade
     */
    symbol: string;
    /**
     *
     * @type {string}
     * @memberof Trade
     */
    takerOrMaker: TradeTakerOrMakerEnum;
    /**
     *
     * @type {number}
     * @memberof Trade
     */
    cost: number;
    /**
     *
     * @type {Fee}
     * @memberof Trade
     */
    fee: Fee;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TradeSideEnum {
    Buy = "buy",
    Sell = "sell"
}
/**
    * @export
    * @enum {string}
    */
export declare enum TradeTakerOrMakerEnum {
    Taker = "taker",
    Maker = "maker"
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateBacktestOptions} createBacktestOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBacktest: (createBacktestOptions: CreateBacktestOptions, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllConfigOptions: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {'port' | 'appDir'} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigOptionByKey: (key: 'port' | 'appDir', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeIds: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeStatuses: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {ExchangeID} id
     * @param {string} pair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarket: (id: ExchangeID, pair: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPairs: (id: ExchangeID, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStrategyByFilename: (fileName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTimeFrames: (id: ExchangeID, options?: any) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateBacktestOptions} createBacktestOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBacktest(createBacktestOptions: CreateBacktestOptions, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBacktestResult>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllConfigOptions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @param {'port' | 'appDir'} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigOptionByKey(key: 'port' | 'appDir', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string | number>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeIds(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeStatuses(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordExchangeIDBoolean>>;
    /**
     *
     * @param {ExchangeID} id
     * @param {string} pair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarket(id: ExchangeID, pair: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Market>>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPairs(id: ExchangeID, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStrategyByFilename(fileName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStrategyResult>>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTimeFrames(id: ExchangeID, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: string | number;
    }>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateBacktestOptions} createBacktestOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBacktest(createBacktestOptions: CreateBacktestOptions, options?: any): AxiosPromise<CreateBacktestResult>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllConfigOptions(options?: any): AxiosPromise<any>;
    /**
     *
     * @param {'port' | 'appDir'} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigOptionByKey(key: 'port' | 'appDir', options?: any): AxiosPromise<string | number>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeIds(options?: any): AxiosPromise<Array<string>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeStatuses(options?: any): AxiosPromise<RecordExchangeIDBoolean>;
    /**
     *
     * @param {ExchangeID} id
     * @param {string} pair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMarket(id: ExchangeID, pair: string, options?: any): AxiosPromise<Market>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPairs(id: ExchangeID, options?: any): AxiosPromise<Array<string>>;
    /**
     *
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStrategyByFilename(fileName: string, options?: any): AxiosPromise<GetStrategyResult>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTimeFrames(id: ExchangeID, options?: any): AxiosPromise<{
        [key: string]: string | number;
    }>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @param {CreateBacktestOptions} createBacktestOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createBacktest(createBacktestOptions: CreateBacktestOptions, options?: any): Promise<import("axios").AxiosResponse<CreateBacktestResult>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAllConfigOptions(options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @param {'port' | 'appDir'} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getConfigOptionByKey(key: 'port' | 'appDir', options?: any): Promise<import("axios").AxiosResponse<string | number>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getExchangeIds(options?: any): Promise<import("axios").AxiosResponse<string[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getExchangeStatuses(options?: any): Promise<import("axios").AxiosResponse<RecordExchangeIDBoolean>>;
    /**
     *
     * @param {ExchangeID} id
     * @param {string} pair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMarket(id: ExchangeID, pair: string, options?: any): Promise<import("axios").AxiosResponse<Market>>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPairs(id: ExchangeID, options?: any): Promise<import("axios").AxiosResponse<string[]>>;
    /**
     *
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStrategyByFilename(fileName: string, options?: any): Promise<import("axios").AxiosResponse<GetStrategyResult>>;
    /**
     *
     * @param {ExchangeID} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTimeFrames(id: ExchangeID, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: string | number;
    }>>;
}
//# sourceMappingURL=api.d.ts.map
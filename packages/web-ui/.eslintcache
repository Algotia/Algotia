[{"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/index.tsx":"1","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/App.tsx":"2","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/index.ts":"3","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/init/init.tsx":"4","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Layout.tsx":"5","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/index.ts":"6","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/theme.ts":"7","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/reset.tsx":"8","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/SideBar.tsx":"9","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Footer.tsx":"10","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/index.ts":"11","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/index.ts":"12","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/form.tsx":"13","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/utils.tsx":"14","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/backtest.tsx":"15","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/index.ts":"16","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/context.ts":"17","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/strategyEditor.tsx":"18","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/index.ts":"19","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/chart.tsx":"20","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/editor.tsx":"21","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/defaultValue.ts":"22","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/topBar.tsx":"23","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/results.tsx":"24","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/index.tsx":"25","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/openOrders.tsx":"26","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/errors.tsx":"27","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/form.tsx":"28","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/closedOrders.tsx":"29","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/balance.tsx":"30","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/index.ts":"31","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPeriod.tsx":"32","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectInitialBalance.tsx":"33","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectExchange.tsx":"34","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectDates.tsx":"35","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPair.tsx":"36","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/index.ts":"37","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/index.js":"38","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_assert.js":"39","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_base.js":"40","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_async_hooks.js":"41","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/ccxt.js":"42","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_buffer.js":"43","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_console.js":"44","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_child_process.js":"45","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_cluster.js":"46","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dgram.js":"47","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_constants.js":"48","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dns.js":"49","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_domain.js":"50","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_events.js":"51","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_crypto.js":"52","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals_global.js":"53","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_https.js":"54","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http.js":"55","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_index.js":"56","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals.js":"57","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_net.js":"58","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_os.js":"59","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_module.js":"60","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_path.js":"61","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_perf_hooks.js":"62","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_process.js":"63","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_punycode.js":"64","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_querystring.js":"65","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http2.js":"66","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_readline.js":"67","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_repl.js":"68","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_stream.js":"69","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_timers.js":"70","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_string_decoder.js":"71","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_trace_events.js":"72","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tty.js":"73","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_url.js":"74","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tls.js":"75","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_fs.js":"76","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_v8.js":"77","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_util.js":"78","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_wasi.js":"79","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_vm.js":"80","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_zlib.js":"81","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_worker_threads.js":"82","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_inspector.js":"83","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/newStrategyModal.tsx":"84","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/bottomBar.tsx":"85","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/docs/index.tsx":"86"},{"size":237,"mtime":1611095400451,"results":"87","hashOfConfig":"88"},{"size":2699,"mtime":1611544059812,"results":"89","hashOfConfig":"88"},{"size":91,"mtime":1611095400448,"results":"90","hashOfConfig":"88"},{"size":4065,"mtime":1611105814091,"results":"91","hashOfConfig":"88"},{"size":745,"mtime":1611378296810,"results":"92","hashOfConfig":"88"},{"size":28,"mtime":1611095400451,"results":"93","hashOfConfig":"88"},{"size":205,"mtime":1611095400451,"results":"94","hashOfConfig":"88"},{"size":1434,"mtime":1611095400448,"results":"95","hashOfConfig":"88"},{"size":2757,"mtime":1611543509016,"results":"96","hashOfConfig":"88"},{"size":3146,"mtime":1611097754233,"results":"97","hashOfConfig":"88"},{"size":83,"mtime":1611095400451,"results":"98","hashOfConfig":"88"},{"size":54,"mtime":1611095400451,"results":"99","hashOfConfig":"88"},{"size":407,"mtime":1611095400451,"results":"100","hashOfConfig":"88"},{"size":828,"mtime":1611095400451,"results":"101","hashOfConfig":"88"},{"size":4064,"mtime":1611381523312,"results":"102","hashOfConfig":"88"},{"size":62,"mtime":1611095400451,"results":"103","hashOfConfig":"88"},{"size":716,"mtime":1611361520387,"results":"104","hashOfConfig":"88"},{"size":4972,"mtime":1611534340351,"results":"105","hashOfConfig":"88"},{"size":58,"mtime":1611095400451,"results":"106","hashOfConfig":"88"},{"size":4953,"mtime":1611536972303,"results":"107","hashOfConfig":"88"},{"size":694,"mtime":1611379027142,"results":"108","hashOfConfig":"88"},{"size":1919,"mtime":1611105819248,"results":"109","hashOfConfig":"88"},{"size":3965,"mtime":1611533511740,"results":"110","hashOfConfig":"88"},{"size":3532,"mtime":1611377767101,"results":"111","hashOfConfig":"88"},{"size":49,"mtime":1611095400451,"results":"112","hashOfConfig":"88"},{"size":1124,"mtime":1611365550282,"results":"113","hashOfConfig":"88"},{"size":972,"mtime":1611365579941,"results":"114","hashOfConfig":"88"},{"size":7610,"mtime":1611376758152,"results":"115","hashOfConfig":"88"},{"size":1478,"mtime":1611544299635,"results":"116","hashOfConfig":"88"},{"size":3770,"mtime":1611377286151,"results":"117","hashOfConfig":"88"},{"size":52,"mtime":1611095400451,"results":"118","hashOfConfig":"88"},{"size":1388,"mtime":1611095400554,"results":"119","hashOfConfig":"88"},{"size":2496,"mtime":1611287726198,"results":"120","hashOfConfig":"88"},{"size":1382,"mtime":1611095400554,"results":"121","hashOfConfig":"88"},{"size":939,"mtime":1611283607330,"results":"122","hashOfConfig":"88"},{"size":1001,"mtime":1611283147449,"results":"123","hashOfConfig":"88"},{"size":45,"mtime":1611179699178,"results":"124","hashOfConfig":"88"},{"size":2372,"mtime":1611096248459,"results":"125","hashOfConfig":"88"},{"size":5271,"mtime":1611096248449,"results":"126","hashOfConfig":"88"},{"size":1034,"mtime":1611096248449,"results":"127","hashOfConfig":"88"},{"size":11173,"mtime":1611096248449,"results":"128","hashOfConfig":"88"},{"size":22225,"mtime":1611096248449,"results":"129","hashOfConfig":"88"},{"size":844,"mtime":1611096248449,"results":"130","hashOfConfig":"88"},{"size":160,"mtime":1611096248449,"results":"131","hashOfConfig":"88"},{"size":25302,"mtime":1611096248449,"results":"132","hashOfConfig":"88"},{"size":16669,"mtime":1611096248449,"results":"133","hashOfConfig":"88"},{"size":6132,"mtime":1611096248452,"results":"134","hashOfConfig":"88"},{"size":23524,"mtime":1611096248452,"results":"135","hashOfConfig":"88"},{"size":16552,"mtime":1611096248452,"results":"136","hashOfConfig":"88"},{"size":690,"mtime":1611096248452,"results":"137","hashOfConfig":"88"},{"size":2556,"mtime":1611096248452,"results":"138","hashOfConfig":"88"},{"size":46658,"mtime":1611096248452,"results":"139","hashOfConfig":"88"},{"size":174,"mtime":1611096248452,"results":"140","hashOfConfig":"88"},{"size":2488,"mtime":1611096248455,"results":"141","hashOfConfig":"88"},{"size":17772,"mtime":1611096248455,"results":"142","hashOfConfig":"88"},{"size":3194,"mtime":1611096248455,"results":"143","hashOfConfig":"88"},{"size":49810,"mtime":1611096248452,"results":"144","hashOfConfig":"88"},{"size":13320,"mtime":1611096248455,"results":"145","hashOfConfig":"88"},{"size":8332,"mtime":1611096248455,"results":"146","hashOfConfig":"88"},{"size":163,"mtime":1611096248455,"results":"147","hashOfConfig":"88"},{"size":6201,"mtime":1611096248455,"results":"148","hashOfConfig":"88"},{"size":10274,"mtime":1611096248455,"results":"149","hashOfConfig":"88"},{"size":640,"mtime":1611096248455,"results":"150","hashOfConfig":"88"},{"size":3335,"mtime":1611096248455,"results":"151","hashOfConfig":"88"},{"size":1199,"mtime":1611096248455,"results":"152","hashOfConfig":"88"},{"size":58066,"mtime":1611096248455,"results":"153","hashOfConfig":"88"},{"size":7307,"mtime":1611096248455,"results":"154","hashOfConfig":"88"},{"size":18554,"mtime":1611096248455,"results":"155","hashOfConfig":"88"},{"size":18639,"mtime":1611096248455,"results":"156","hashOfConfig":"88"},{"size":946,"mtime":1611096248455,"results":"157","hashOfConfig":"88"},{"size":312,"mtime":1611096248455,"results":"158","hashOfConfig":"88"},{"size":2290,"mtime":1611096248455,"results":"159","hashOfConfig":"88"},{"size":2620,"mtime":1611096248455,"results":"160","hashOfConfig":"88"},{"size":4472,"mtime":1611096248455,"results":"161","hashOfConfig":"88"},{"size":35451,"mtime":1611096248455,"results":"162","hashOfConfig":"88"},{"size":137986,"mtime":1611096248452,"results":"163","hashOfConfig":"88"},{"size":7225,"mtime":1611096248459,"results":"164","hashOfConfig":"88"},{"size":12616,"mtime":1611096248455,"results":"165","hashOfConfig":"88"},{"size":2362,"mtime":1611096248459,"results":"166","hashOfConfig":"88"},{"size":4763,"mtime":1611096248459,"results":"167","hashOfConfig":"88"},{"size":14524,"mtime":1611096248459,"results":"168","hashOfConfig":"88"},{"size":9995,"mtime":1611096248459,"results":"169","hashOfConfig":"88"},{"size":125410,"mtime":1611096248455,"results":"170","hashOfConfig":"88"},{"size":3368,"mtime":1611190623734,"results":"171","hashOfConfig":"88"},{"size":1455,"mtime":1611534081958,"results":"172","hashOfConfig":"88"},{"size":406,"mtime":1611545401143,"results":"173","hashOfConfig":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"1vczama",{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"176"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"176"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"176"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"176"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"176"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"176"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"176"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"176"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"176"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"176"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"176"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"176"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"176"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"265"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/index.tsx",[],["363","364"],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/App.tsx",["365","366"],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/init/init.tsx",["367","368"],"import styled from \"styled-components\";\nimport { Button } from \"@material-ui/core\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Column } from \"../../components/shared\";\nimport MonacoEditor, { monaco, EditorDidMount } from \"@monaco-editor/react\";\nimport { FC, useEffect, useState } from \"react\";\nimport { InitRes } from \"../../App\";\n\nconst Wrapper = styled(Column)`\n    width: 100%;\n    height: 100%;\n    background-color: blue;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Body = styled(Column)`\n    width: 50%;\n    height: 80%;\n    align-items: center;\n`;\n\nconst Header = styled.div`\n    text-align: center;\n    margin-bottom: 50px;\n`;\n\nconst Heading = styled.h1`\n    font-size: 5em;\n`;\n\nconst SubHeading = styled.h3`\n    font-size: 3em;\n    margin-top: 25px;\n`;\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: \"25px\",\n        backgroundColor: \"green\",\n        borderRadius: 3,\n        border: 0,\n        color: \"#ffffff\",\n        height: \"50px\",\n        padding: \"0 30px\",\n        boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n        \"&:hover\": {\n            backgroundColor: \"green\",\n        },\n        \"&:disabled\": {\n            color: \"#000\",\n            backgroundColor: \"grey\",\n        },\n    },\n    disabled: {},\n});\n\nmonaco.init().then((monaco) => {\n    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        schemas: [\n            {\n                uri: \"http://json-schema.org/draft-07/schema\",\n                fileMatch: [\"*\"],\n                schema: {\n                    type: \"object\",\n                    properties: {\n                        port: {\n                            type: \"integer\",\n                            minimum: \"1\",\n                            maximum: \"65535\",\n                        },\n                        strategyDir: {\n                            title: \"Strategy directory\",\n                            type: \"string\",\n                            example: \"/foo/bar\",\n                            pattern: \"^/([A-z0-9-_+]+/)*([A-z0-9])+/?$\",\n                            description:\n                                \"An absoulte path to a directory that will be created, this path should not yet exist.\",\n                        },\n                    },\n                    required: [\"port\", \"strategyDir\"],\n                    additionalProperties: false,\n                },\n            },\n        ],\n    });\n});\n\nconst Init: FC<{\n    init: InitRes;\n    onInit: (config: any) => void;\n}> = ({ init, onInit }) => {\n    // const editorDidMount: EditorDidMount = (editor) => {\n    //     editor.focus();\n    // };\n\n    const [config, setConfig] = useState<string>(init.initialConfig || \"\");\n    const [runDisabled, setRunDisabled] = useState(false);\n\n    useEffect(() => {\n        console.log(\"INIT\", init);\n        init.initialConfig && setConfig(init.initialConfig);\n    }, [init]);\n\n    useEffect(() => {\n        let json: any = {};\n        try {\n            json = JSON.parse(config);\n        } catch (err) {}\n        if (!json.port || !json.strategyDir) {\n            setRunDisabled(true);\n        } else {\n            setRunDisabled(false);\n        }\n    }, [config]);\n\n    const classes = useStyles();\n\n    return (\n        <Wrapper>\n            <Body>\n                <Header>\n                    <Heading>Welcome</Heading>\n                    <SubHeading>{\"Let's get started\"}</SubHeading>\n                </Header>\n                <MonacoEditor\n                    width=\"80%\"\n                    height=\"400px\"\n                    theme=\"vs-dark\"\n                    value={config}\n                    language={\"json\"}\n                />\n                <Button\n                    classes={classes}\n                    disabled={runDisabled}\n                    onClick={() => {\n                        !runDisabled && onInit(config);\n                    }}\n                >\n                    submit\n                </Button>\n            </Body>\n        </Wrapper>\n    );\n};\n\nexport default Init;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Layout.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/theme.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/reset.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/SideBar.tsx",["369"],"import React, { PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { Column } from \"../shared\";\nimport { IconType } from \"react-icons\";\nimport { FaHome, FaBook } from \"react-icons/fa\";\nimport { RiTestTubeFill } from \"react-icons/ri\";\nimport { NavLink } from \"react-router-dom\";\nimport { Paper } from \"@material-ui/core\";\nimport { createStyles, withStyles, WithStyles, Theme, useTheme } from \"@material-ui/core/styles\";\n\nconst styles = (theme: Theme) => {\n    return createStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100%\",\n            width: \"100px\",\n            borderRadius: \"0px\",\n            backgroundColor: theme.palette.primary.main,\n        },\n    });\n};\n\ninterface Props extends PropsWithChildren<WithStyles<typeof styles>> {}\n\nconst Wrapper = withStyles(styles)(({ classes, children }: Props) => (\n    <Paper classes={classes} elevation={3} square>\n        {children}\n    </Paper>\n));\n\nconst AlgotiaLogo = styled.div`\n    height: 50px;\n    width: 80%;\n    box-sizing: border-box;\n    margin: 0 auto;\n`;\n\nconst NavItem = styled(Column)`\n    height: 50px;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Label = styled.p`\n    font-size: 1em;\n`;\nconst Seperator = styled.hr`\n    width: 80%;\n    margin: 5px auto 5px;\n`;\n\ninterface NavItemObj {\n    path: string;\n    label: string;\n    Icon: IconType;\n}\n\nconst navItems: NavItemObj[] = [\n    {\n        path: \"/\",\n        label: \"Home\",\n        Icon: FaHome,\n    },\n    {\n        path: \"/backtest\",\n        label: \"Backtest\",\n        Icon: RiTestTubeFill,\n    },\n\t{\n\t\tpath: \"/docs\",\n\t\tlabel: \"Docs\",\n\t\tIcon: FaBook\n\t}\n];\n\nconst SideBar = () => {\n    const theme = useTheme();\n    return (\n        <Wrapper>\n            <AlgotiaLogo />\n            {navItems.map(({ path, label, Icon }, i) => {\n                return (\n                    <div key={\"to-\" + path}>\n                        <Seperator />\n                        <NavLink\n                            exact\n                            to={path}\n                            style={{\n                                color: \"#999\",\n                            }}\n                            activeStyle={{\n                                color: \"#fff\",\n                            }}\n                        >\n                            <NavItem>\n                                <Icon size={24} />\n                                <Label>{label}</Label>\n                            </NavItem>\n                        </NavLink>\n                        {i === navItems.length - 1 && <Seperator />}\n                    </div>\n                );\n            })}\n        </Wrapper>\n    );\n};\n\nexport default SideBar;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Footer.tsx",["370"],"import { PropsWithChildren } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { FaThumbsDown, FaThumbsUp } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport { Row } from \"../shared\";\nimport { Paper, Theme } from \"@material-ui/core\";\nimport {\n    WithStyles,\n    withStyles,\n    createStyles,\n} from \"@material-ui/core/styles\";\n\nconst styles = (theme: Theme) => {\n    return createStyles({\n        root: {\n            position: \"absolute\",\n            top: \"-111px\",\n            right: \"5px\",\n            height: \"100px\",\n            width: \"150px\",\n            color: \"#fff\",\n            padding: \"2px 5px\",\n            backgroundColor: theme.palette.primary.main,\n        },\n    });\n};\n\ninterface Props extends PropsWithChildren<WithStyles<typeof styles>> {}\n\nconst Menu = withStyles(styles)(({ classes, children }: Props) => (\n    <Paper classes={classes} elevation={3} square>\n        {children}\n    </Paper>\n));\n\nconst Wrapper = styled(Row)`\n    padding: 5px 10px;\n    height: 30px;\n    border-top: 2px solid #000;\n    justify-content: flex-end;\n    align-items: center;\n    position: relative;\n`;\n\nconst StatusWrapper = styled.div`\n    cursor: pointer;\n`;\n\n// const Menu = styled.div`\n// `;\n\nconst MenuHeader = styled.div`\n    width: 100%;\n    padding-bottom: 5px;\n    border-bottom: 1px solid #fff;\n    margin-bottom: 5px;\n`;\n\nconst StatusRow = styled(Row)`\n    margin-bottom: 10px;\n`;\nconst StatusLabel = styled.p`\n    text-transform: capitalize;\n    margin-right: 10px;\n`;\n\nconst Footer = () => {\n    const [menuOpen, setMenuOpen] = useState(false);\n    const [data, setData] = useState<Record<string, boolean>>();\n\n    const fetchStatus = async () => {\n        const res = await fetch(\"/api/status\");\n        if (res.status !== 200) {\n            throw \"PLACEHOLDER ERROR\";\n        }\n        const json = await res.json();\n        setData(json.exchanges);\n    };\n\n    useEffect(() => {\n        fetchStatus();\n    }, []);\n\n    const onClick = () => {\n        if (menuOpen === false) {\n            fetchStatus();\n        }\n        setMenuOpen(!menuOpen);\n    };\n\n    return (\n            <Wrapper>\n                <StatusWrapper onClick={onClick}>\n                    <button>Status</button>\n                </StatusWrapper>\n                {menuOpen && (\n                    <Menu>\n                        <MenuHeader>Exchange status</MenuHeader>\n                        {data &&\n                            Object.keys(data).map((key) => {\n                                return (\n                                    <StatusRow>\n                                        <StatusLabel>{key}</StatusLabel>\n                                        {data[key] ? (\n                                            <FaThumbsUp color=\"green\" />\n                                        ) : (\n                                            <FaThumbsDown />\n                                        )}\n                                    </StatusRow>\n                                );\n                            })}\n                    </Menu>\n                )}\n            </Wrapper>\n    );\n};\n\nexport default Footer;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/form.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/utils.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/backtest.tsx",["371"],"import React, { FC, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Editor from \"./editor\";\nimport Form from \"./form\";\nimport Results from \"./results/\";\nimport Chart from \"./chart\";\nimport { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport { Options, BacktestContext, RequestResult } from \"./context\";\n\nconst Wrapper = styled.div`\n    height: 100%;\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-template-rows: repeat(5, 1fr);\n    grid-column-gap: 15px;\n    grid-row-gap: 15px;\n    box-sizing: border-box;\n`;\n\nconst TopLeft = styled.div`\n    grid-area: 1 / 1 / 3 / 4;\n`;\n\nconst BottomLeft = styled.div`\n    grid-area: 3 / 1 / 6 / 4;\n`;\n\nconst TopRight = styled.div`\n    grid-area: 1 / 4 / 3 / 6;\n`;\n\nconst BottomRight = styled.div`\n    grid-area: 3 / 4 / 6 / 6;\n`;\n\nconst BacktestPage: FC = () => {\n    const [requestResult, setRequestResult] = useState<RequestResult>();\n    const [options, setOptions] = useState<Options>();\n    const [strategyPath, setStraegyPath] = useState<string>();\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (options) {\n            let result: RequestResult;\n\n            const body = {\n                ...options,\n                strategyPath,\n            };\n\n            setLoading(true);\n\n            fetch(\"/api/backtest\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                },\n                body: JSON.stringify(body),\n            })\n                .then((res) => {\n                    return res.json();\n                })\n                .then((res) => {\n                    if (res.errors) {\n                        alert(res.errors);\n                        console.log(res.errors);\n                    }\n                    result = {\n                        ...result,\n                        candles: res.candles,\n                        results: res.results,\n                        options,\n                    };\n                })\n                .catch((err) => {\n                    alert(err);\n                })\n                .then(() => {\n                    fetch(\n                        `/api/exchange?id=${options.exchange}&market=${options.pair}`\n                    )\n                        .then((res) => res.json())\n                        .then((json) => {\n                            if (json.market) {\n                                result = {\n                                    ...result,\n                                    market: json.market,\n                                };\n                            } else if (json.errors) {\n                                alert(json.errors);\n                            }\n                        })\n                        .catch((err) => {\n                            alert(err);\n                        })\n                        .then(() => {\n                            setRequestResult(result);\n                        });\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        }\n    }, [options]);\n\n    return (\n        <BacktestContext.Provider\n            value={{\n                requestResult,\n                strategyPath,\n                loading,\n            }}\n        >\n            <Wrapper>\n                <Backdrop style={{ zIndex: 1000 }} open={loading}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <TopLeft>\n                    <Chart />\n                </TopLeft>\n                <TopRight>\n                    <Results />\n                </TopRight>\n                <BottomLeft>\n                    <Editor setStraegyPath={setStraegyPath} />\n                </BottomLeft>\n                <BottomRight>\n                    <Form setOptions={setOptions} />\n                </BottomRight>\n            </Wrapper>\n        </BacktestContext.Provider>\n    );\n};\n\nexport default BacktestPage;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/context.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/strategyEditor.tsx",["372","373","374"],"import { FC, useState, useEffect, useRef, MutableRefObject } from \"react\";\nimport Editor, { EditorDidMount, monaco } from \"@monaco-editor/react\";\nimport styled, { CSSObject, StyledComponent } from \"styled-components\";\nimport TopBar from \"./topBar\";\nimport defaultValue from \"./defaultValue\";\nimport editorTypes from \"../../../assets/editor_types\";\nimport BottomBar from \"./bottomBar\";\nimport { Paper } from \"@material-ui/core\";\nimport { StrategyData, StrategyMetaData } from \"@algotia/types\";\n\nlet KEY_S: number;\nlet CtrlCmd: number;\n\nmonaco.init().then((m) => {\n    m.languages.typescript.typescriptDefaults.setCompilerOptions({\n        target: m.languages.typescript.ScriptTarget.ES2016,\n        allowNonTsExtensions: true,\n        moduleResolution: m.languages.typescript.ModuleResolutionKind.NodeJs,\n        module: m.languages.typescript.ModuleKind.CommonJS,\n        noEmit: true,\n        esModuleInterop: true,\n    });\n\n    Object.keys(editorTypes).forEach((key) => {\n        if (editorTypes.hasOwnProperty(key)) {\n            m.languages.typescript.typescriptDefaults.addExtraLib(\n                //@ts-ignore\n                editorTypes[key],\n                `node_modules/${key}`\n            );\n            m.languages.typescript.javascriptDefaults.addExtraLib(\n                //@ts-ignore\n                editorTypes[key],\n                `node_modules/${key}`\n            );\n        }\n    });\n\n    CtrlCmd = m.KeyMod.CtrlCmd;\n    KEY_S = m.KeyCode.KEY_S;\n});\n\nconst EditorWrapper = styled(Paper)`\n    && {\n        height: 100%;\n        width: 100%;\n    }\n`;\n\nconst EditorSSS = styled.div`\n    height: calc(100% - 55px);\n`;\n\nconst StrategyEditor: FC<{\n    rootRef: MutableRefObject<HTMLDivElement> | undefined;\n    onStrategySelected?: (strategy: StrategyMetaData) => void;\n}> = (props) => {\n    const { onStrategySelected, rootRef } = props;\n\n    const [editorValue, setEditorValue] = useState<string>(defaultValue);\n    const [strategyMeta, setStrategyMeta] = useState<StrategyMetaData>();\n\n    const selectStrategy = (meta: StrategyMetaData) => {\n        fetch(`/api/strategy/${meta.basename}`)\n            .then((res) => res.json())\n            .then(({ value, ...meta }: StrategyData) => {\n                setStrategyMeta(meta);\n                setEditorValue(value);\n            });\n    };\n\n    const editorRef = useRef<any>();\n\n    const editorDidMount: EditorDidMount = (_, editor) => {\n        editorRef.current = editor;\n    };\n\n    useEffect(() => {\n        if (strategyMeta && editorRef.current) {\n            onStrategySelected && onStrategySelected(strategyMeta);\n            editorRef.current.addCommand(CtrlCmd | KEY_S, () => {\n                if (editorRef.current && strategyMeta) {\n                    const newValue = editorRef.current.getValue();\n\n                    setStrategyMeta(\n                        (prev) =>\n                            prev && {\n                                ...prev,\n                                value: newValue,\n                            }\n                    );\n\n                    fetch(\"/api/strategy\", {\n                        method: \"POST\",\n                        headers: {\n                            Accept: \"application/json\",\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: JSON.stringify({\n                            fileName: strategyMeta.basename,\n                            value: newValue,\n                        }),\n                    })\n                        .then((res) => {\n                            return res.json();\n                        })\n                        .then((json) => {\n                            if (json.results === true) {\n                                alert(\"saved\");\n                            }\n                        })\n                        .catch(() => {\n                            alert(\"something went wrong\");\n                        });\n                }\n            });\n        }\n    }, [strategyMeta]);\n\n    return (\n        <EditorWrapper ref={rootRef}>\n            <TopBar selectStrategy={selectStrategy} />\n            <EditorSSS>\n                <Editor\n                    language={\n                        strategyMeta\n                            ? // strategyMeta.language is the formatted language name\n                              // TypeScript || JavaScript -> typescript | javascript\n                              strategyMeta.language.toLowerCase()\n                            : \"text\"\n                    }\n                    height=\"100%\"\n                    options={{\n                        readOnly: !strategyMeta,\n                    }}\n                    theme=\"vs-dark\"\n                    value={editorValue}\n                    editorDidMount={editorDidMount}\n                />\n            </EditorSSS>\n            <BottomBar height=\"20px\" meta={strategyMeta} />\n        </EditorWrapper>\n    );\n};\n\nexport default StrategyEditor;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/chart.tsx",["375","376","377","378"],"import { OHLCV } from \"@algotia/core\";\nimport { Component, ContextType, FC } from \"react\";\nimport {\n    ema,\n    CandlestickSeries,\n    Chart,\n    ChartCanvas,\n    discontinuousTimeScaleProviderBuilder,\n    XAxis,\n    YAxis,\n    withSize,\n    withDeviceRatio,\n    WithSizeProps,\n    Annotate,\n    LabelAnnotation,\n    LabelAnnotationProps,\n    OHLCTooltip,\n    LineSeries,\n} from \"react-financial-charts\";\nimport { BacktestContext } from \"./context\";\nimport styled from \"styled-components\";\nimport { Paper } from \"@material-ui/core\";\n\ninterface ChartProps extends WithSizeProps {\n    readonly ratio: number;\n}\n\nconst Wrapper = styled(Paper)`\n    && {\n        height: 100%;\n        width: 100%;\n        box-sizing: border-box;\n    }\n`;\n\nclass ResultChart extends Component<ChartProps> {\n    static contextType = BacktestContext;\n\n    context!: ContextType<typeof BacktestContext>;\n\n    private readonly margin = { left: 0, right: 40, top: 0, bottom: 24 };\n\n    private readonly xScaleProvider = discontinuousTimeScaleProviderBuilder().inputDateAccessor(\n        (d: OHLCV) => new Date(d.timestamp)\n    );\n\n    private readonly buyAnnotation: Omit<LabelAnnotationProps, \"plotData\"> = {\n        rotate: 90,\n        text: ({ timestamp }: OHLCV) => {\n            if (this.context.requestResult) {\n                const order = this.context.requestResult.results.closedOrders.find(\n                    (order) => order.timestamp === timestamp\n                );\n                if (order) return order.side;\n            }\n            return \"\";\n        },\n        tooltip: \"yeet\",\n        fill: ({ timestamp }: OHLCV) => {\n            if (this.context.requestResult) {\n                const order = this.context.requestResult.results.closedOrders.find(\n                    (order) => order.timestamp === timestamp\n                );\n                if (order) return order.side === \"buy\" ? \"green\" : \"red\";\n            }\n            return \"#000\";\n        },\n        y: ({ yScale, datum }: any) => {\n            const order = this.context.requestResult?.results.closedOrders.find(\n                (order) => order.timestamp == datum.timestamp\n            );\n            if (order?.side === \"buy\") {\n                return yScale(datum.high) - 20;\n            } else {\n                return yScale(datum.low) + 20;\n            }\n        },\n    };\n\n    public render() {\n        const { height, width } = this.props;\n\n        const annotationDates = (data: OHLCV) => {\n            return Boolean(\n                this.context.requestResult?.results.closedOrders.find(\n                    (order) => order.timestamp === data.timestamp\n                )\n            );\n        };\n\n        const {\n            data,\n            xScale,\n            xAccessor,\n            displayXAccessor,\n        } = this.xScaleProvider(this.context.requestResult?.candles || []);\n\n        const max = xAccessor(data[data.length - 1]);\n        const min = xAccessor(data[Math.max(0, data.length - 100)]);\n        const xExtents = [min, max];\n\n        return (\n            <Wrapper>\n                <ChartCanvas\n                    height={height - 4}\n                    width={width - 4}\n                    ratio={1}\n                    margin={this.margin}\n                    data={data}\n                    displayXAccessor={displayXAccessor}\n                    seriesName=\"Data\"\n                    xScale={xScale}\n                    xAccessor={xAccessor}\n                    xExtents={xExtents}\n                >\n                    <Chart id={1} yExtents={this.yExtents}>\n                        <XAxis showGridLines={true} />\n                        <YAxis showGridLines={true} />\n                        <Annotate\n                            with={LabelAnnotation}\n                            usingProps={this.buyAnnotation}\n                            when={annotationDates}\n                        />\n                        <CandlestickSeries />\n                        {data.length && (\n                            <OHLCTooltip\n                                ohlcFormat={(n) => {\n                                    const precision =\n                                        this.context.requestResult?.market\n                                            .precision.quote || 4;\n                                    return n.valueOf().toFixed(precision);\n                                }}\n                                origin={[8, 16]}\n                                textFill={(d) =>\n                                    d.close > d.open ? \"#26a69a\" : \"#ef5350\"\n                                }\n                            />\n                        )}\n                    </Chart>\n                </ChartCanvas>\n            </Wrapper>\n        );\n    }\n\n    private readonly yExtents = (data: OHLCV) => {\n        return [data.high, data.low];\n    };\n}\n\nexport default withSize({ style: { width: \"100%\", height: \"100%\" } })(\n    withDeviceRatio()(ResultChart)\n);\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/editor.tsx",["379","380"],"import React, { FC, MutableRefObject, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { StrategyEditor } from \"../../components/shared\";\n\nconst EditorRoot = styled.div`\n    height: 100%;\n    width: 100%;\n`;\n\nconst Editor: FC<{ setStraegyPath: (path: string) => void }> = (props) => {\n    const { setStraegyPath } = props;\n\n    const rootRef = useRef<any>();\n\n    return (\n        <EditorRoot ref={rootRef}>\n            <StrategyEditor\n                rootRef={rootRef}\n                onStrategySelected={(strategy) => {\n                    setStraegyPath(strategy.path);\n                }}\n            />\n        </EditorRoot>\n    );\n};\n\nexport default Editor;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/defaultValue.ts",["381"],"const defaultValue1 = `\n   █████████   █████         █████████     ███████    ███████████ █████   █████████  \n  ███░░░░░███ ░░███         ███░░░░░███  ███░░░░░███ ░█░░░███░░░█░░███   ███░░░░░███ \n ░███    ░███  ░███        ███     ░░░  ███     ░░███░   ░███  ░  ░███  ░███    ░███ \n ░███████████  ░███       ░███         ░███      ░███    ░███     ░███  ░███████████ \n ░███░░░░░███  ░███       ░███    █████░███      ░███    ░███     ░███  ░███░░░░░███ \n ░███    ░███  ░███      █░░███  ░░███ ░░███     ███     ░███     ░███  ░███    ░███ \n █████   █████ ███████████ ░░█████████  ░░░███████░      █████    █████ █████   █████\n░░░░░   ░░░░░ ░░░░░░░░░░░   ░░░░░░░░░     ░░░░░░░       ░░░░░    ░░░░░ ░░░░░   ░░░░░ \n\n~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ +-+-+-+-+-+-+ +-+ +-+-+-+-+-+-+-+-+ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |C|H|O|O|S|E| |A| |S|T|R|A|T|E|G|Y| ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ +-+-+-+-+-+-+ +-+ +-+-+-+-+-+-+-+-+ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\n`;\n\nconst defaultValue = `\n// Choose a strategy\n`;\n\nexport default defaultValue;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/topBar.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/results.tsx",["382","383","384","385","386"],"import { Dispatch, FC, SetStateAction, useContext, useState } from \"react\";\nimport { Column } from \"../../../components\";\nimport { BacktestResults, OHLCV } from \"@algotia/core\";\nimport {\n    Button,\n    ButtonGroup,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n    Toolbar,\n} from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { BacktestContext } from \"../context\";\nimport Balance from \"./balance\";\nimport ClosedOrders from \"./closedOrders\";\nimport Errors from \"./errors\";\nimport OpenOrders from \"./openOrders\";\n\nconst ResultsTableWrapper = styled(Paper)`\n    height: 100%;\n    width: 100%;\n`;\n\nconst Header = styled(Toolbar)`\n    height: 50px;\n    width: 100%;\n    display: flex;\n    box-sizing: border-box;\n    padding: 5px 0;\n    justify-content: center;\n    align-items: space-around;\n`;\n\nconst useTabsStyles = makeStyles({\n    root: {\n        width: \"auto\",\n    },\n});\n\nconst TableBody = styled(Column)`\n    height: 100%;\n    width: calc(100% - 30px);\n    margin: 0 auto;\n`;\n\nconst Results: FC = () => {\n    const { requestResult } = useContext(BacktestContext);\n\n    const allGroups: [keyof BacktestResults, string][] = [\n        [\"balance\", \"balance\"],\n        [\"closedOrders\", \"closed orders\"],\n        [\"openOrders\", \"open orders\"],\n        [\"errors\", \"errors\"],\n    ];\n\n    const [activeGroup, setActiveGroup] = useState<keyof BacktestResults>(\n        allGroups[0][0]\n    );\n\n    const tabClasses = useTabsStyles();\n\n    return (\n        <ResultsTableWrapper>\n            <Header>\n                <ButtonGroup>\n                    {allGroups.map(([resultKey, label]) => {\n                        if (requestResult?.results) {\n                            label =\n                                resultKey === \"balance\"\n                                    ? resultKey\n                                    : label +\n                                      \" (\" +\n                                      requestResult.results[resultKey].length +\n                                      \")\";\n                            return (\n                                <Button\n                                    className={tabClasses.root}\n                                    onClick={() => {\n                                        setActiveGroup(resultKey);\n                                    }}\n                                >\n                                    {label}\n                                </Button>\n                            );\n                        } else {\n                            return (\n                                <Button\n                                    className={tabClasses.root}\n                                    onClick={() => {\n                                        setActiveGroup(resultKey);\n                                    }}\n                                >\n                                    {label}\n                                </Button>\n                            );\n                        }\n                    })}\n                </ButtonGroup>\n            </Header>\n            <TableBody>\n                {activeGroup === \"balance\" && <Balance />}\n                {activeGroup === \"closedOrders\" && <ClosedOrders />}\n                {activeGroup === \"openOrders\" && <OpenOrders />}\n                {activeGroup === \"errors\" && <Errors />}\n            </TableBody>\n        </ResultsTableWrapper>\n    );\n};\nexport default Results;\n// <Tabs\n//     onChange={handleGroupChange}\n//     value={activeGroup}\n//     scrollButtons=\"auto\"\n// >\n// </Tabs>\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/index.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/openOrders.tsx",["387","388","389","390"],"import { BacktestResults, OHLCV, parsePair } from \"@algotia/core\";\nimport { FC, useContext } from \"react\";\nimport { BacktestContext, Options } from \"../context\";\nimport { ColDef, DataGrid } from \"@material-ui/data-grid\";\n\nconst columns: ColDef[] = [\n    { field: \"id\", headerName: \"ID\", width: 70 },\n    { field: \"side\", headerName: \"Side\", width: 85 },\n    { field: \"amount\", headerName: \"Amount\", flex: 0.7 },\n    { field: \"price\", headerName: \"Price\", flex: 0.8 },\n    { field: \"cost\", headerName: \"Cost\", flex: 0.8 },\n];\n\nconst OpenOrders: FC = () => {\n    const { requestResult } = useContext(BacktestContext);\n\n    const rows = requestResult?.results.openOrders.map((order, i) => {\n        const { side, amount, price, cost } = order;\n        return {\n            id: i,\n            side,\n            cost,\n            price,\n            amount,\n        };\n    });\n\n    return (\n        <DataGrid\n            rows={rows || []}\n            columns={columns}\n            density=\"compact\"\n            rowsPerPageOptions={[100]}\n            disableSelectionOnClick={true}\n        />\n    );\n};\n\nexport default OpenOrders;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/errors.tsx",["391","392","393","394"],"import { BacktestResults, OHLCV, parsePair } from \"@algotia/core\";\nimport { FC, useContext } from \"react\";\nimport { BacktestContext, Options } from \"../context\";\nimport { ColDef, DataGrid } from \"@material-ui/data-grid\";\n\nconst columns: ColDef[] = [\n    { field: \"id\", headerName: \"ID\", width: 70 },\n    { field: \"at\", headerName: \"At\", flex: 1 },\n    { field: \"message\", headerName: \"Message\", flex: 2 },\n];\n\nconst Errors: FC = () => {\n    const { requestResult } = useContext(BacktestContext);\n\n    const rows = requestResult?.results.errors.map((error, i) => {\n        const { timestamp, message } = error;\n        return {\n            id: i,\n            message,\n            at: new Date(timestamp),\n        };\n    });\n\n    return (\n        <DataGrid\n            rows={rows || []}\n            columns={columns}\n            density=\"compact\"\n            disableSelectionOnClick={true}\n            rowsPerPageOptions={[100]}\n        />\n    );\n};\n\nexport default Errors;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/form.tsx",["395","396","397"],"import {\n    useEffect,\n    useState,\n    FC,\n    Dispatch,\n    SetStateAction,\n    useContext,\n} from \"react\";\nimport styled from \"styled-components\";\nimport { ExchangeID, parsePair, parsePeriod } from \"@algotia/core\";\nimport { Button, Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Row } from \"../../../components/shared\";\nimport { BacktestContext, Options } from \"../context\";\nimport SelectExchange from \"./selectExchange\";\nimport SelectDate from \"./selectDates\";\nimport SelectInitialBalance from \"./selectInitialBalance\";\nimport SelectPair from \"./selectPair\";\nimport SelectPeriod from \"./selectPeriod\";\n\nconst FormWrapper = styled.div`\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    background-color: #ffffff;\n    position: relative;\n    box-sizing: border-box;\n`;\n\nconst FormBody = styled(Paper)`\n    && {\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: space-evenly;\n    }\n`;\n\nconst FormItem = styled(Row)`\n    width: 45%;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst RowItem = styled(FormItem)`\n    width: 80%;\n    justify-content: space-between;\n`;\n\nconst useStyles = makeStyles({\n    root: {\n        height: \"50px\",\n        width: \"100px\",\n        fontSize: \"20px\",\n        boxSizing: \"border-box\",\n    },\n    primary: {\n        backgroundColor: \"#20ad16\",\n    },\n    disabled: {\n        backgroundColor: \"grey\",\n    },\n});\n\nconst Form: FC<{\n    setOptions: Dispatch<SetStateAction<Options | undefined>>;\n}> = (props) => {\n    const [pairList, setPairList] = useState<string[]>();\n    const [periodList, setTimeframeList] = useState<string[]>();\n    const [currencyList, setCurrencyList] = useState<string[]>();\n\n    let now = new Date();\n\n    now.setHours(0, 0, 0);\n\n    now.setMilliseconds(0);\n\n    const initialTo = new Date(now);\n\n    now.setMonth(now.getMonth() - 1);\n\n    const initialFrom = new Date(now);\n\n    const [exchangeId, setExchangeId] = useState<ExchangeID>(\"\" as ExchangeID);\n    const [pair, setPair] = useState(\"\");\n    const [period, setPeriod] = useState<string>(\"\");\n    const [to, setTo] = useState<Date>(initialTo);\n    const [from, setFrom] = useState<Date>(initialFrom);\n    const [baseCurrency, setBaseCurrency] = useState(\"\");\n    const [quoteCurrency, setQuoteCurrency] = useState(\"\");\n    const [baseAmount, setBaseAmount] = useState(0);\n    const [quoteAmount, setQuoteAmount] = useState(0);\n\n    const [canRun, setCanRun] = useState(false);\n\n    useEffect(() => {\n        if (pair) {\n            const [base, quote] = parsePair(pair);\n            setBaseCurrency(base);\n            setBaseAmount(0);\n            setQuoteCurrency(quote);\n            setQuoteAmount(0);\n        }\n    }, [pair]);\n\n    useEffect(() => {\n        if (exchangeId) {\n            fetch(\n                `/api/exchange?id=${exchangeId}&symbols=true&timeframes=true&currencies=true`\n            )\n                .then((res) => {\n                    return res.json();\n                })\n                .then((res) => {\n                    setPairList(res.symbols);\n                    setTimeframeList(Object.keys(res.timeframes));\n                    setCurrencyList(Object.keys(res.currencies));\n                })\n                .catch((err) => {\n                    alert(err);\n                });\n            setPair(\"\");\n            setPeriod(\"\");\n        }\n    }, [exchangeId]);\n\n    useEffect(() => {\n        if (to && from && pair && period) {\n            setCanRun(true);\n        }\n    }, [to, from, pair, period]);\n\n    const classes = useStyles();\n\n    const buttonClasses = `${classes.root} ${\n        (canRun && classes.primary) || classes.disabled\n    }`;\n\n    const run = () => {\n        if (exchangeId && to && from && period && pair) {\n            const body = {\n                exchange: exchangeId,\n                to: new Date(to.toUTCString()).getTime(),\n                from: new Date(from.toUTCString()).getTime(),\n                pair: pair,\n                period,\n                initialBalance: {\n                    [baseCurrency]: baseAmount,\n                    [quoteCurrency]: quoteAmount,\n                },\n            };\n            props.setOptions(body);\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <FormBody>\n                <FormItem>\n                    <SelectExchange\n                        exchangeId={exchangeId}\n                        setExchangeId={setExchangeId}\n                    />\n                </FormItem>\n                <RowItem>\n                    <FormItem>\n                        <SelectDate\n                            exchangeId={exchangeId}\n                            setDate={setFrom}\n                            date={from}\n                            label=\"From\"\n                            minDate={new Date(\"01/01/2015\")}\n                        />\n                    </FormItem>\n\n                    <FormItem>\n                        <SelectDate\n                            exchangeId={exchangeId}\n                            setDate={setTo}\n                            date={to}\n                            label=\"To\"\n                            minDate={new Date(from ? from : \"01/01/2015\")}\n                        />\n                    </FormItem>\n                </RowItem>\n                <RowItem>\n                    <FormItem>\n                        <SelectPair\n                            pairList={pairList}\n                            setPair={setPair}\n                            pair={pair}\n                        />\n                    </FormItem>\n                    <FormItem>\n                        <SelectPeriod\n                            period={period}\n                            setPeriod={setPeriod}\n                            periodList={periodList}\n                        />\n                    </FormItem>\n                </RowItem>\n                <RowItem>\n                    <SelectInitialBalance\n                        id=\"base\"\n                        currency={baseCurrency}\n                        setCurrency={setBaseCurrency}\n                        amount={baseAmount}\n                        setAmount={setBaseAmount}\n                        pair={pair}\n                        FormItem={FormItem}\n                        currencyList={currencyList}\n                        onChange={({ amount }) => {\n                            setBaseAmount(amount);\n                        }}\n                    />\n                </RowItem>\n                <RowItem>\n                    <SelectInitialBalance\n                        FormItem={FormItem}\n                        id=\"quote\"\n                        currency={quoteCurrency}\n                        setCurrency={setQuoteCurrency}\n                        amount={quoteAmount}\n                        setAmount={setQuoteAmount}\n                        pair={pair}\n                        currencyList={currencyList}\n                        onChange={({ amount }) => {\n                            setQuoteAmount(amount);\n                        }}\n                    />\n                </RowItem>\n                <FormItem>\n                    <Button\n                        disabled={!canRun}\n                        className={buttonClasses}\n                        onClick={run}\n                    >\n                        Run\n                    </Button>\n                </FormItem>\n            </FormBody>\n        </FormWrapper>\n    );\n};\n\nexport default Form;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/closedOrders.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/balance.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPeriod.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectInitialBalance.tsx",["398"],"import { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { FC, useEffect, useState } from \"react\";\n\ninterface SelectInitialBalanceProps {\n    id: string;\n    pair: string;\n    currencyList: string[] | undefined;\n    onChange: (value: { currency: string; amount: number }) => void;\n    FormItem: FC;\n}\n\nconst SelectInitialBalance: FC<SelectInitialBalanceProps> = (props) => {\n    const { id, pair, currencyList, FormItem } = props;\n    const [currency, setCurrency] = useState<string>(\"\");\n    const [amount, setAmount] = useState<number>(0);\n    const [error, setError] = useState(false);\n\n    return (\n        <>\n            <FormItem>\n                <Autocomplete\n                    id={id + \"-autocomplete\"}\n                    fullWidth={true}\n                    disabled={!pair}\n                    options={currencyList || []}\n                    getOptionLabel={(c) => c}\n                    value={currency}\n                    inputValue={initialCurrency || currency}\n                    onChange={(_, val) => {\n                        console.log(\"V\", val);\n                        if (val) {\n                            setCurrency(val);\n                        }\n                    }}\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            label=\"Select a currency\"\n                            variant=\"standard\"\n                        />\n                    )}\n                />\n            </FormItem>\n            <FormItem>\n                <TextField\n                    id={id + \"-text-field\"}\n                    disabled={!pair}\n                    fullWidth={true}\n                    label={\"Amount\"}\n                    value={amount}\n                    error={typeof amount === \"string\"}\n                    onChange={(e) => {\n                        let val: string | number = e.target.value;\n                        if (!isNaN(Number(val))) {\n                            error && setError(false);\n                            val = Number(val);\n                            setAmount(val);\n                        } else {\n                            setError(true);\n                        }\n                    }}\n                />\n            </FormItem>\n        </>\n    );\n};\n\nexport default SelectInitialBalance;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectExchange.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectDates.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPair.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/index.js",["399"],"\nimport ccxt from \"./ccxt\" \nimport _assert from \"./_assert\" \nimport _async_hooks from \"./_async_hooks\" \nimport _base from \"./_base\" \nimport _buffer from \"./_buffer\" \nimport _child_process from \"./_child_process\" \nimport _cluster from \"./_cluster\" \nimport _console from \"./_console\" \nimport _constants from \"./_constants\" \nimport _crypto from \"./_crypto\" \nimport _dgram from \"./_dgram\" \nimport _dns from \"./_dns\" \nimport _domain from \"./_domain\" \nimport _events from \"./_events\" \nimport _fs from \"./_fs\" \nimport _globals from \"./_globals\" \nimport _globals_global from \"./_globals_global\" \nimport _http from \"./_http\" \nimport _http2 from \"./_http2\" \nimport _https from \"./_https\" \nimport _index from \"./_index\" \nimport _inspector from \"./_inspector\" \nimport _module from \"./_module\" \nimport _net from \"./_net\" \nimport _os from \"./_os\" \nimport _path from \"./_path\" \nimport _perf_hooks from \"./_perf_hooks\" \nimport _process from \"./_process\" \nimport _punycode from \"./_punycode\" \nimport _querystring from \"./_querystring\" \nimport _readline from \"./_readline\" \nimport _repl from \"./_repl\" \nimport _stream from \"./_stream\" \nimport _string_decoder from \"./_string_decoder\" \nimport _timers from \"./_timers\" \nimport _tls from \"./_tls\" \nimport _trace_events from \"./_trace_events\" \nimport _tty from \"./_tty\" \nimport _url from \"./_url\" \nimport _util from \"./_util\" \nimport _v8 from \"./_v8\" \nimport _vm from \"./_vm\" \nimport _wasi from \"./_wasi\" \nimport _worker_threads from \"./_worker_threads\" \nimport _zlib from \"./_zlib\" \n\n\nexport default {\n\t'ccxt': ccxt,'assert': _assert,'async_hooks': _async_hooks,'base': _base,'buffer': _buffer,'child_process': _child_process,'cluster': _cluster,'console': _console,'constants': _constants,'crypto': _crypto,'dgram': _dgram,'dns': _dns,'domain': _domain,'events': _events,'fs': _fs,'globals': _globals,'globals.global': _globals_global,'http': _http,'http2': _http2,'https': _https,'index': _index,'inspector': _inspector,'module': _module,'net': _net,'os': _os,'path': _path,'perf_hooks': _perf_hooks,'process': _process,'punycode': _punycode,'querystring': _querystring,'readline': _readline,'repl': _repl,'stream': _stream,'string_decoder': _string_decoder,'timers': _timers,'tls': _tls,'trace_events': _trace_events,'tty': _tty,'url': _url,'util': _util,'v8': _v8,'vm': _vm,'wasi': _wasi,'worker_threads': _worker_threads,'zlib': _zlib,\n}\n",["400","401"],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_assert.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_base.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_async_hooks.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/ccxt.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_buffer.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_console.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_child_process.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_cluster.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dgram.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_constants.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dns.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_domain.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_events.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_crypto.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals_global.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_https.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_index.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_net.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_os.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_module.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_path.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_perf_hooks.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_process.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_punycode.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_querystring.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http2.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_readline.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_repl.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_stream.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_timers.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_string_decoder.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_trace_events.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tty.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_url.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tls.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_fs.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_v8.js",["402"],"\n// This file is automatically generated. Do not edit it.\n\nconst _v8 = \"declare module \\\"v8\\\" {\\n    import { Readable } from \\\"stream\\\";\\n\\n    interface HeapSpaceInfo {\\n        space_name: string;\\n        space_size: number;\\n        space_used_size: number;\\n        space_available_size: number;\\n        physical_space_size: number;\\n    }\\n\\n    // ** Signifies if the --zap_code_space option is enabled or not.  1 == enabled, 0 == disabled. */\\n    type DoesZapCodeSpaceFlag = 0 | 1;\\n\\n    interface HeapInfo {\\n        total_heap_size: number;\\n        total_heap_size_executable: number;\\n        total_physical_size: number;\\n        total_available_size: number;\\n        used_heap_size: number;\\n        heap_size_limit: number;\\n        malloced_memory: number;\\n        peak_malloced_memory: number;\\n        does_zap_garbage: DoesZapCodeSpaceFlag;\\n        number_of_native_contexts: number;\\n        number_of_detached_contexts: number;\\n    }\\n\\n    interface HeapCodeStatistics {\\n        code_and_metadata_size: number;\\n        bytecode_and_metadata_size: number;\\n        external_script_source_size: number;\\n    }\\n\\n    /**\\n     * Returns an integer representing a \\\"version tag\\\" derived from the V8 version, command line flags and detected CPU features.\\n     * This is useful for determining whether a vm.Script cachedData buffer is compatible with this instance of V8.\\n     */\\n    function cachedDataVersionTag(): number;\\n\\n    function getHeapStatistics(): HeapInfo;\\n    function getHeapSpaceStatistics(): HeapSpaceInfo[];\\n    function setFlagsFromString(flags: string): void;\\n    /**\\n     * Generates a snapshot of the current V8 heap and returns a Readable\\n     * Stream that may be used to read the JSON serialized representation.\\n     * This conversation was marked as resolved by joyeecheung\\n     * This JSON stream format is intended to be used with tools such as\\n     * Chrome DevTools. The JSON schema is undocumented and specific to the\\n     * V8 engine, and may change from one version of V8 to the next.\\n     */\\n    function getHeapSnapshot(): Readable;\\n\\n    /**\\n     *\\n     * @param fileName The file path where the V8 heap snapshot is to be\\n     * saved. If not specified, a file name with the pattern\\n     * `'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot'` will be\\n     * generated, where `{pid}` will be the PID of the Node.js process,\\n     * `{thread_id}` will be `0` when `writeHeapSnapshot()` is called from\\n     * the main Node.js thread or the id of a worker thread.\\n     */\\n    function writeHeapSnapshot(fileName?: string): string;\\n\\n    function getHeapCodeStatistics(): HeapCodeStatistics;\\n\\n    /**\\n     * @experimental\\n     */\\n    class Serializer {\\n        /**\\n         * Writes out a header, which includes the serialization format version.\\n         */\\n        writeHeader(): void;\\n\\n        /**\\n         * Serializes a JavaScript value and adds the serialized representation to the internal buffer.\\n         * This throws an error if value cannot be serialized.\\n         */\\n        writeValue(val: any): boolean;\\n\\n        /**\\n         * Returns the stored internal buffer.\\n         * This serializer should not be used once the buffer is released.\\n         * Calling this method results in undefined behavior if a previous write has failed.\\n         */\\n        releaseBuffer(): Buffer;\\n\\n        /**\\n         * Marks an ArrayBuffer as having its contents transferred out of band.\\\\\\n         * Pass the corresponding ArrayBuffer in the deserializing context to deserializer.transferArrayBuffer().\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n\\n        /**\\n         * Write a raw 32-bit unsigned integer.\\n         */\\n        writeUint32(value: number): void;\\n\\n        /**\\n         * Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.\\n         */\\n        writeUint64(hi: number, lo: number): void;\\n\\n        /**\\n         * Write a JS number value.\\n         */\\n        writeDouble(value: number): void;\\n\\n        /**\\n         * Write raw bytes into the serializer’s internal buffer.\\n         * The deserializer will require a way to compute the length of the buffer.\\n         */\\n        writeRawBytes(buffer: NodeJS.TypedArray): void;\\n    }\\n\\n    /**\\n     * A subclass of `Serializer` that serializes `TypedArray` (in particular `Buffer`) and `DataView` objects as host objects,\\n     * and only stores the part of their underlying `ArrayBuffers` that they are referring to.\\n     * @experimental\\n     */\\n    class DefaultSerializer extends Serializer {\\n    }\\n\\n    /**\\n     * @experimental\\n     */\\n    class Deserializer {\\n        constructor(data: NodeJS.TypedArray);\\n        /**\\n         * Reads and validates a header (including the format version).\\n         * May, for example, reject an invalid or unsupported wire format.\\n         * In that case, an Error is thrown.\\n         */\\n        readHeader(): boolean;\\n\\n        /**\\n         * Deserializes a JavaScript value from the buffer and returns it.\\n         */\\n        readValue(): any;\\n\\n        /**\\n         * Marks an ArrayBuffer as having its contents transferred out of band.\\n         * Pass the corresponding `ArrayBuffer` in the serializing context to serializer.transferArrayBuffer()\\n         * (or return the id from serializer._getSharedArrayBufferId() in the case of SharedArrayBuffers).\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n\\n        /**\\n         * Reads the underlying wire format version.\\n         * Likely mostly to be useful to legacy code reading old wire format versions.\\n         * May not be called before .readHeader().\\n         */\\n        getWireFormatVersion(): number;\\n\\n        /**\\n         * Read a raw 32-bit unsigned integer and return it.\\n         */\\n        readUint32(): number;\\n\\n        /**\\n         * Read a raw 64-bit unsigned integer and return it as an array [hi, lo] with two 32-bit unsigned integer entries.\\n         */\\n        readUint64(): [number, number];\\n\\n        /**\\n         * Read a JS number value.\\n         */\\n        readDouble(): number;\\n\\n        /**\\n         * Read raw bytes from the deserializer’s internal buffer.\\n         * The length parameter must correspond to the length of the buffer that was passed to serializer.writeRawBytes().\\n         */\\n        readRawBytes(length: number): Buffer;\\n    }\\n\\n    /**\\n     * A subclass of `Serializer` that serializes `TypedArray` (in particular `Buffer`) and `DataView` objects as host objects,\\n     * and only stores the part of their underlying `ArrayBuffers` that they are referring to.\\n     * @experimental\\n     */\\n    class DefaultDeserializer extends Deserializer {\\n    }\\n\\n    /**\\n     * Uses a `DefaultSerializer` to serialize value into a buffer.\\n     * @experimental\\n     */\\n    function serialize(value: any): Buffer;\\n\\n    /**\\n     * Uses a `DefaultDeserializer` with default options to read a JS value from a buffer.\\n     * @experimental\\n     */\\n    function deserialize(data: NodeJS.TypedArray): any;\\n}\\n\"\n\nexport default _v8\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_util.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_wasi.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_vm.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_zlib.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_worker_threads.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_inspector.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/newStrategyModal.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/bottomBar.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/docs/index.tsx",[],{"ruleId":"403","replacedBy":"404"},{"ruleId":"405","replacedBy":"406"},{"ruleId":"407","severity":1,"message":"408","line":10,"column":7,"nodeType":"409","messageId":"410","endLine":10,"endColumn":12},{"ruleId":"407","severity":1,"message":"411","line":20,"column":12,"nodeType":"409","messageId":"410","endLine":20,"endColumn":19},{"ruleId":"407","severity":1,"message":"412","line":3,"column":22,"nodeType":"409","messageId":"410","endLine":3,"endColumn":27},{"ruleId":"407","severity":1,"message":"413","line":5,"column":32,"nodeType":"409","messageId":"410","endLine":5,"endColumn":46},{"ruleId":"407","severity":1,"message":"414","line":79,"column":11,"nodeType":"409","messageId":"410","endLine":79,"endColumn":16},{"ruleId":"415","severity":1,"message":"416","line":74,"column":13,"nodeType":"417","messageId":"418","endLine":74,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":105,"column":8,"nodeType":"421","endLine":105,"endColumn":17,"suggestions":"422"},{"ruleId":"407","severity":1,"message":"423","line":3,"column":18,"nodeType":"409","messageId":"410","endLine":3,"endColumn":27},{"ruleId":"407","severity":1,"message":"424","line":3,"column":29,"nodeType":"409","messageId":"410","endLine":3,"endColumn":44},{"ruleId":"419","severity":1,"message":"425","line":118,"column":8,"nodeType":"421","endLine":118,"endColumn":22,"suggestions":"426"},{"ruleId":"407","severity":1,"message":"427","line":2,"column":34,"nodeType":"409","messageId":"410","endLine":2,"endColumn":36},{"ruleId":"407","severity":1,"message":"428","line":4,"column":5,"nodeType":"409","messageId":"410","endLine":4,"endColumn":8},{"ruleId":"407","severity":1,"message":"429","line":18,"column":5,"nodeType":"409","messageId":"410","endLine":18,"endColumn":15},{"ruleId":"430","severity":1,"message":"431","line":70,"column":44,"nodeType":"432","messageId":"433","endLine":70,"endColumn":46},{"ruleId":"407","severity":1,"message":"434","line":1,"column":21,"nodeType":"409","messageId":"410","endLine":1,"endColumn":37},{"ruleId":"407","severity":1,"message":"435","line":1,"column":47,"nodeType":"409","messageId":"410","endLine":1,"endColumn":55},{"ruleId":"407","severity":1,"message":"436","line":1,"column":7,"nodeType":"409","messageId":"410","endLine":1,"endColumn":20},{"ruleId":"407","severity":1,"message":"437","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":18},{"ruleId":"407","severity":1,"message":"438","line":1,"column":24,"nodeType":"409","messageId":"410","endLine":1,"endColumn":38},{"ruleId":"407","severity":1,"message":"439","line":3,"column":27,"nodeType":"409","messageId":"410","endLine":3,"endColumn":32},{"ruleId":"407","severity":1,"message":"440","line":9,"column":5,"nodeType":"409","messageId":"410","endLine":9,"endColumn":8},{"ruleId":"407","severity":1,"message":"441","line":10,"column":5,"nodeType":"409","messageId":"410","endLine":10,"endColumn":9},{"ruleId":"407","severity":1,"message":"442","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":25},{"ruleId":"407","severity":1,"message":"439","line":1,"column":27,"nodeType":"409","messageId":"410","endLine":1,"endColumn":32},{"ruleId":"407","severity":1,"message":"443","line":1,"column":34,"nodeType":"409","messageId":"410","endLine":1,"endColumn":43},{"ruleId":"407","severity":1,"message":"444","line":3,"column":27,"nodeType":"409","messageId":"410","endLine":3,"endColumn":34},{"ruleId":"407","severity":1,"message":"442","line":1,"column":10,"nodeType":"409","messageId":"410","endLine":1,"endColumn":25},{"ruleId":"407","severity":1,"message":"439","line":1,"column":27,"nodeType":"409","messageId":"410","endLine":1,"endColumn":32},{"ruleId":"407","severity":1,"message":"443","line":1,"column":34,"nodeType":"409","messageId":"410","endLine":1,"endColumn":43},{"ruleId":"407","severity":1,"message":"444","line":3,"column":27,"nodeType":"409","messageId":"410","endLine":3,"endColumn":34},{"ruleId":"407","severity":1,"message":"445","line":7,"column":5,"nodeType":"409","messageId":"410","endLine":7,"endColumn":15},{"ruleId":"407","severity":1,"message":"446","line":10,"column":33,"nodeType":"409","messageId":"410","endLine":10,"endColumn":44},{"ruleId":"407","severity":1,"message":"447","line":14,"column":10,"nodeType":"409","messageId":"410","endLine":14,"endColumn":25},{"ruleId":"407","severity":1,"message":"448","line":3,"column":14,"nodeType":"409","messageId":"410","endLine":3,"endColumn":23},{"ruleId":"449","severity":1,"message":"450","line":49,"column":1,"nodeType":"451","endLine":51,"endColumn":2},{"ruleId":"403","replacedBy":"404"},{"ruleId":"405","replacedBy":"406"},{"ruleId":"452","severity":1,"message":"453","line":4,"column":13,"nodeType":"454","messageId":"455","endLine":4,"endColumn":7142},"no-native-reassign",["456"],"no-negated-in-lhs",["457"],"@typescript-eslint/no-unused-vars","'About' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'Theme' is defined but never used.","'EditorDidMount' is defined but never used.","'theme' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'strategyPath'. Either include it or remove the dependency array.","ArrayExpression",["458"],"'CSSObject' is defined but never used.","'StyledComponent' is defined but never used.","React Hook useEffect has a missing dependency: 'onStrategySelected'. Either include it or remove the dependency array.",["459"],"'FC' is defined but never used.","'ema' is defined but never used.","'LineSeries' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'MutableRefObject' is defined but never used.","'useState' is defined but never used.","'defaultValue1' is assigned a value but never used.","'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'OHLCV' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'BacktestResults' is defined but never used.","'parsePair' is defined but never used.","'Options' is defined but never used.","'useContext' is defined but never used.","'parsePeriod' is defined but never used.","'BacktestContext' is defined but never used.","'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-global-assign","no-unsafe-negation",{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},"Update the dependencies array to be: [options, strategyPath]",{"range":"464","text":"465"},"Update the dependencies array to be: [onStrategySelected, strategyMeta]",{"range":"466","text":"467"},[3193,3202],"[options, strategyPath]",[4000,4014],"[onStrategySelected, strategyMeta]"]
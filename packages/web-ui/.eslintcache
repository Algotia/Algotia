[{"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/index.tsx":"1","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/App.tsx":"2","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/index.ts":"3","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Layout.tsx":"4","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/index.ts":"5","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/theme.ts":"6","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/reset.tsx":"7","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/SideBar.tsx":"8","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Footer.tsx":"9","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/index.ts":"10","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/index.ts":"11","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/form.tsx":"12","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/utils.tsx":"13","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/backtest.tsx":"14","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/index.ts":"15","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/context.ts":"16","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/strategyEditor.tsx":"17","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/index.ts":"18","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/chart.tsx":"19","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/editor.tsx":"20","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/defaultValue.ts":"21","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/topBar.tsx":"22","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/results.tsx":"23","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/index.tsx":"24","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/openOrders.tsx":"25","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/errors.tsx":"26","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/form.tsx":"27","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/closedOrders.tsx":"28","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/balance.tsx":"29","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/index.ts":"30","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPeriod.tsx":"31","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectInitialBalance.tsx":"32","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectExchange.tsx":"33","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectDates.tsx":"34","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPair.tsx":"35","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/index.ts":"36","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/index.js":"37","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_assert.js":"38","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_base.js":"39","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_async_hooks.js":"40","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/ccxt.js":"41","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_buffer.js":"42","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_console.js":"43","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_child_process.js":"44","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_cluster.js":"45","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dgram.js":"46","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_constants.js":"47","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dns.js":"48","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_domain.js":"49","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_events.js":"50","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_crypto.js":"51","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals_global.js":"52","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_https.js":"53","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http.js":"54","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_index.js":"55","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals.js":"56","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_net.js":"57","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_os.js":"58","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_module.js":"59","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_path.js":"60","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_perf_hooks.js":"61","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_process.js":"62","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_punycode.js":"63","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_querystring.js":"64","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http2.js":"65","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_readline.js":"66","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_repl.js":"67","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_stream.js":"68","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_timers.js":"69","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_string_decoder.js":"70","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_trace_events.js":"71","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tty.js":"72","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_url.js":"73","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tls.js":"74","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_fs.js":"75","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_v8.js":"76","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_util.js":"77","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_wasi.js":"78","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_vm.js":"79","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_zlib.js":"80","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_worker_threads.js":"81","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_inspector.js":"82","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/newStrategyModal.tsx":"83","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/bottomBar.tsx":"84","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/docs/index.tsx":"85"},{"size":237,"mtime":1611095400451,"results":"86","hashOfConfig":"87"},{"size":1219,"mtime":1611785114153,"results":"88","hashOfConfig":"87"},{"size":91,"mtime":1611095400448,"results":"89","hashOfConfig":"87"},{"size":745,"mtime":1611378296810,"results":"90","hashOfConfig":"87"},{"size":28,"mtime":1611095400451,"results":"91","hashOfConfig":"87"},{"size":205,"mtime":1611095400451,"results":"92","hashOfConfig":"87"},{"size":1434,"mtime":1611095400448,"results":"93","hashOfConfig":"87"},{"size":2757,"mtime":1611543509016,"results":"94","hashOfConfig":"87"},{"size":3319,"mtime":1611795395680,"results":"95","hashOfConfig":"87"},{"size":83,"mtime":1611095400451,"results":"96","hashOfConfig":"87"},{"size":54,"mtime":1611095400451,"results":"97","hashOfConfig":"87"},{"size":407,"mtime":1611095400451,"results":"98","hashOfConfig":"87"},{"size":828,"mtime":1611095400451,"results":"99","hashOfConfig":"87"},{"size":2987,"mtime":1611794775140,"results":"100","hashOfConfig":"87"},{"size":62,"mtime":1611095400451,"results":"101","hashOfConfig":"87"},{"size":562,"mtime":1611790264484,"results":"102","hashOfConfig":"87"},{"size":4926,"mtime":1611793960292,"results":"103","hashOfConfig":"87"},{"size":58,"mtime":1611095400451,"results":"104","hashOfConfig":"87"},{"size":4995,"mtime":1611786479012,"results":"105","hashOfConfig":"87"},{"size":694,"mtime":1611379027142,"results":"106","hashOfConfig":"87"},{"size":1919,"mtime":1611105819248,"results":"107","hashOfConfig":"87"},{"size":3987,"mtime":1611786184927,"results":"108","hashOfConfig":"87"},{"size":3539,"mtime":1611786538001,"results":"109","hashOfConfig":"87"},{"size":49,"mtime":1611095400451,"results":"110","hashOfConfig":"87"},{"size":1048,"mtime":1611793665390,"results":"111","hashOfConfig":"87"},{"size":970,"mtime":1611793655244,"results":"112","hashOfConfig":"87"},{"size":7678,"mtime":1611790382098,"results":"113","hashOfConfig":"87"},{"size":1478,"mtime":1611544299635,"results":"114","hashOfConfig":"87"},{"size":3770,"mtime":1611793506476,"results":"115","hashOfConfig":"87"},{"size":52,"mtime":1611095400451,"results":"116","hashOfConfig":"87"},{"size":1306,"mtime":1611789638250,"results":"117","hashOfConfig":"87"},{"size":2463,"mtime":1611788592397,"results":"118","hashOfConfig":"87"},{"size":1592,"mtime":1611788149304,"results":"119","hashOfConfig":"87"},{"size":939,"mtime":1611283607330,"results":"120","hashOfConfig":"87"},{"size":935,"mtime":1611789269939,"results":"121","hashOfConfig":"87"},{"size":45,"mtime":1611179699178,"results":"122","hashOfConfig":"87"},{"size":2372,"mtime":1611096248459,"results":"123","hashOfConfig":"87"},{"size":5271,"mtime":1611096248449,"results":"124","hashOfConfig":"87"},{"size":1034,"mtime":1611096248449,"results":"125","hashOfConfig":"87"},{"size":11173,"mtime":1611096248449,"results":"126","hashOfConfig":"87"},{"size":22225,"mtime":1611096248449,"results":"127","hashOfConfig":"87"},{"size":844,"mtime":1611096248449,"results":"128","hashOfConfig":"87"},{"size":160,"mtime":1611096248449,"results":"129","hashOfConfig":"87"},{"size":25302,"mtime":1611096248449,"results":"130","hashOfConfig":"87"},{"size":16669,"mtime":1611096248449,"results":"131","hashOfConfig":"87"},{"size":6132,"mtime":1611096248452,"results":"132","hashOfConfig":"87"},{"size":23524,"mtime":1611096248452,"results":"133","hashOfConfig":"87"},{"size":16552,"mtime":1611096248452,"results":"134","hashOfConfig":"87"},{"size":690,"mtime":1611096248452,"results":"135","hashOfConfig":"87"},{"size":2556,"mtime":1611096248452,"results":"136","hashOfConfig":"87"},{"size":46658,"mtime":1611096248452,"results":"137","hashOfConfig":"87"},{"size":174,"mtime":1611096248452,"results":"138","hashOfConfig":"87"},{"size":2488,"mtime":1611096248455,"results":"139","hashOfConfig":"87"},{"size":17772,"mtime":1611096248455,"results":"140","hashOfConfig":"87"},{"size":3194,"mtime":1611096248455,"results":"141","hashOfConfig":"87"},{"size":49810,"mtime":1611096248452,"results":"142","hashOfConfig":"87"},{"size":13320,"mtime":1611096248455,"results":"143","hashOfConfig":"87"},{"size":8332,"mtime":1611096248455,"results":"144","hashOfConfig":"87"},{"size":163,"mtime":1611096248455,"results":"145","hashOfConfig":"87"},{"size":6201,"mtime":1611096248455,"results":"146","hashOfConfig":"87"},{"size":10274,"mtime":1611096248455,"results":"147","hashOfConfig":"87"},{"size":640,"mtime":1611096248455,"results":"148","hashOfConfig":"87"},{"size":3335,"mtime":1611096248455,"results":"149","hashOfConfig":"87"},{"size":1199,"mtime":1611096248455,"results":"150","hashOfConfig":"87"},{"size":58066,"mtime":1611096248455,"results":"151","hashOfConfig":"87"},{"size":7307,"mtime":1611096248455,"results":"152","hashOfConfig":"87"},{"size":18554,"mtime":1611096248455,"results":"153","hashOfConfig":"87"},{"size":18639,"mtime":1611096248455,"results":"154","hashOfConfig":"87"},{"size":946,"mtime":1611096248455,"results":"155","hashOfConfig":"87"},{"size":312,"mtime":1611096248455,"results":"156","hashOfConfig":"87"},{"size":2290,"mtime":1611096248455,"results":"157","hashOfConfig":"87"},{"size":2620,"mtime":1611096248455,"results":"158","hashOfConfig":"87"},{"size":4472,"mtime":1611096248455,"results":"159","hashOfConfig":"87"},{"size":35451,"mtime":1611096248455,"results":"160","hashOfConfig":"87"},{"size":137986,"mtime":1611096248452,"results":"161","hashOfConfig":"87"},{"size":7225,"mtime":1611096248459,"results":"162","hashOfConfig":"87"},{"size":12616,"mtime":1611096248455,"results":"163","hashOfConfig":"87"},{"size":2362,"mtime":1611096248459,"results":"164","hashOfConfig":"87"},{"size":4763,"mtime":1611096248459,"results":"165","hashOfConfig":"87"},{"size":14524,"mtime":1611096248459,"results":"166","hashOfConfig":"87"},{"size":9995,"mtime":1611096248459,"results":"167","hashOfConfig":"87"},{"size":125410,"mtime":1611096248455,"results":"168","hashOfConfig":"87"},{"size":2831,"mtime":1611793885947,"results":"169","hashOfConfig":"87"},{"size":1456,"mtime":1611786283315,"results":"170","hashOfConfig":"87"},{"size":411,"mtime":1611795276982,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"1vczama",{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"174"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"174"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"174"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"174"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"174"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"174"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"174"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"174"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"174"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"174"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"174"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"260"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"260"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"260"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"174"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/index.tsx",[],["359","360"],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/App.tsx",["361"],"import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme, ResetCSS } from \"./assets/styles/\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Layout from \"./components/layout/Layout\";\nimport { BacktestPage } from \"./pages\";\nimport Docs from \"./pages/docs\";\n\nconst About = () => <div>about</div>;\nconst Users = () => <div>users</div>;\nconst Home = () => <div>home</div>;\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <ResetCSS />\n            <Router>\n                <Layout>\n                    <Switch>\n                        <Route path=\"/backtest\">\n                            <BacktestPage />\n                        </Route>\n                        <Route path=\"/users\">\n                            <Users />\n                        </Route>\n                        <Route path=\"/docs\">\n                            <Docs />\n                        </Route>\n                        <Route path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                </Layout>\n            </Router>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Layout.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/theme.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/styles/reset.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/SideBar.tsx",["362"],"import React, { PropsWithChildren } from \"react\";\nimport styled from \"styled-components\";\nimport { Column } from \"../shared\";\nimport { IconType } from \"react-icons\";\nimport { FaHome, FaBook } from \"react-icons/fa\";\nimport { RiTestTubeFill } from \"react-icons/ri\";\nimport { NavLink } from \"react-router-dom\";\nimport { Paper } from \"@material-ui/core\";\nimport { createStyles, withStyles, WithStyles, Theme, useTheme } from \"@material-ui/core/styles\";\n\nconst styles = (theme: Theme) => {\n    return createStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100%\",\n            width: \"100px\",\n            borderRadius: \"0px\",\n            backgroundColor: theme.palette.primary.main,\n        },\n    });\n};\n\ninterface Props extends PropsWithChildren<WithStyles<typeof styles>> {}\n\nconst Wrapper = withStyles(styles)(({ classes, children }: Props) => (\n    <Paper classes={classes} elevation={3} square>\n        {children}\n    </Paper>\n));\n\nconst AlgotiaLogo = styled.div`\n    height: 50px;\n    width: 80%;\n    box-sizing: border-box;\n    margin: 0 auto;\n`;\n\nconst NavItem = styled(Column)`\n    height: 50px;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Label = styled.p`\n    font-size: 1em;\n`;\nconst Seperator = styled.hr`\n    width: 80%;\n    margin: 5px auto 5px;\n`;\n\ninterface NavItemObj {\n    path: string;\n    label: string;\n    Icon: IconType;\n}\n\nconst navItems: NavItemObj[] = [\n    {\n        path: \"/\",\n        label: \"Home\",\n        Icon: FaHome,\n    },\n    {\n        path: \"/backtest\",\n        label: \"Backtest\",\n        Icon: RiTestTubeFill,\n    },\n\t{\n\t\tpath: \"/docs\",\n\t\tlabel: \"Docs\",\n\t\tIcon: FaBook\n\t}\n];\n\nconst SideBar = () => {\n    const theme = useTheme();\n    return (\n        <Wrapper>\n            <AlgotiaLogo />\n            {navItems.map(({ path, label, Icon }, i) => {\n                return (\n                    <div key={\"to-\" + path}>\n                        <Seperator />\n                        <NavLink\n                            exact\n                            to={path}\n                            style={{\n                                color: \"#999\",\n                            }}\n                            activeStyle={{\n                                color: \"#fff\",\n                            }}\n                        >\n                            <NavItem>\n                                <Icon size={24} />\n                                <Label>{label}</Label>\n                            </NavItem>\n                        </NavLink>\n                        {i === navItems.length - 1 && <Seperator />}\n                    </div>\n                );\n            })}\n        </Wrapper>\n    );\n};\n\nexport default SideBar;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/Footer.tsx",["363","364","365"],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/form.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/utils.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/backtest.tsx",["366"],"import React, { FC, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Editor from \"./editor\";\nimport Form from \"./form\";\nimport Results from \"./results/\";\nimport Chart from \"./chart\";\nimport { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport { BacktestContext, RequestResult } from \"./context\";\nimport { CreateBacktestOptions, DefaultApi } from \"@algotia/client\";\n\nconst Wrapper = styled.div`\n    height: 100%;\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-template-rows: repeat(5, 1fr);\n    grid-column-gap: 15px;\n    grid-row-gap: 15px;\n    box-sizing: border-box;\n`;\n\nconst TopLeft = styled.div`\n    grid-area: 1 / 1 / 3 / 4;\n`;\n\nconst BottomLeft = styled.div`\n    grid-area: 3 / 1 / 6 / 4;\n`;\n\nconst TopRight = styled.div`\n    grid-area: 1 / 4 / 3 / 6;\n`;\n\nconst BottomRight = styled.div`\n    grid-area: 3 / 4 / 6 / 6;\n`;\n\nconst BacktestPage: FC = () => {\n    const [requestResult, setRequestResult] = useState<RequestResult>();\n    const [options, setOptions] = useState<\n        Omit<CreateBacktestOptions, \"strategyPath\">\n    >();\n    const [strategyPath, setStraegyPath] = useState<string>();\n    const [loading, setLoading] = useState(false);\n\n    const client = new DefaultApi();\n\n    useEffect(() => {\n        if (options && strategyPath) {\n            let result: RequestResult;\n\n            const body = {\n                ...options,\n                strategyPath,\n            };\n\n            setLoading(true);\n            client.createBacktest(body).then(({ data: backtestResult }) => {\n                client\n                    .getMarket(body.exchange, body.pair)\n                    .then(({ data: market }) => {\n                        result = {\n                            ...backtestResult,\n                            options: body,\n                            market,\n                        };\n                        setRequestResult(result);\n                    })\n                    .finally(() => {\n                        setLoading(false);\n                    });\n            });\n        }\n    }, [options]);\n\n    return (\n        <BacktestContext.Provider\n            value={{\n                requestResult,\n                strategyPath,\n                loading,\n            }}\n        >\n            <Wrapper>\n                <Backdrop style={{ zIndex: 1000 }} open={loading}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <TopLeft>\n                    <Chart />\n                </TopLeft>\n                <TopRight>\n                    <Results />\n                </TopRight>\n                <BottomLeft>\n                    <Editor setStraegyPath={setStraegyPath} />\n                </BottomLeft>\n                <BottomRight>\n                    <Form setOptions={setOptions} />\n                </BottomRight>\n            </Wrapper>\n        </BacktestContext.Provider>\n    );\n};\n\nexport default BacktestPage;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/context.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/strategyEditor.tsx",["367","368","369"],"import { FC, useState, useEffect, useRef, MutableRefObject } from \"react\";\nimport Editor, { EditorDidMount, monaco } from \"@monaco-editor/react\";\nimport styled, { CSSObject, StyledComponent } from \"styled-components\";\nimport TopBar from \"./topBar\";\nimport defaultValue from \"./defaultValue\";\nimport editorTypes from \"../../../assets/editor_types\";\nimport BottomBar from \"./bottomBar\";\nimport { Paper } from \"@material-ui/core\";\nimport { DefaultApi, StrategyMetaData } from \"@algotia/client\";\n\nlet KEY_S: number;\nlet CtrlCmd: number;\n\nmonaco.init().then((m) => {\n    m.languages.typescript.typescriptDefaults.setCompilerOptions({\n        target: m.languages.typescript.ScriptTarget.ES2016,\n        allowNonTsExtensions: true,\n        moduleResolution: m.languages.typescript.ModuleResolutionKind.NodeJs,\n        module: m.languages.typescript.ModuleKind.CommonJS,\n        noEmit: true,\n        esModuleInterop: true,\n    });\n\n    Object.keys(editorTypes).forEach((key) => {\n        if (editorTypes.hasOwnProperty(key)) {\n            m.languages.typescript.typescriptDefaults.addExtraLib(\n                //@ts-ignore\n                editorTypes[key],\n                `node_modules/${key}`\n            );\n            m.languages.typescript.javascriptDefaults.addExtraLib(\n                //@ts-ignore\n                editorTypes[key],\n                `node_modules/${key}`\n            );\n        }\n    });\n\n    CtrlCmd = m.KeyMod.CtrlCmd;\n    KEY_S = m.KeyCode.KEY_S;\n});\n\nconst EditorWrapper = styled(Paper)`\n    && {\n        height: 100%;\n        width: 100%;\n    }\n`;\n\nconst EditorSSS = styled.div`\n    height: calc(100% - 55px);\n`;\n\nconst StrategyEditor: FC<{\n    rootRef: MutableRefObject<HTMLDivElement> | undefined;\n    onStrategySelected?: (strategy: StrategyMetaData) => void;\n}> = (props) => {\n    const client = new DefaultApi();\n    const { onStrategySelected, rootRef } = props;\n\n    const [editorValue, setEditorValue] = useState<string>(defaultValue);\n    const [strategyMeta, setStrategyMeta] = useState<StrategyMetaData>();\n\n    const selectStrategy = async (meta: StrategyMetaData) => {\n        const res = await client.getStrategyByFilename(meta.basename);\n        setStrategyMeta(res.data.meta);\n        setEditorValue(res.data.value);\n    };\n\n    const editorRef = useRef<any>();\n\n    const editorDidMount: EditorDidMount = (_, editor) => {\n        editorRef.current = editor;\n    };\n\n    useEffect(() => {\n        if (strategyMeta && editorRef.current) {\n            onStrategySelected && onStrategySelected(strategyMeta);\n            editorRef.current.addCommand(CtrlCmd | KEY_S, () => {\n                if (editorRef.current && strategyMeta) {\n                    const newValue = editorRef.current.getValue();\n\n                    setStrategyMeta(\n                        (prev) =>\n                            prev && {\n                                ...prev,\n                                value: newValue,\n                            }\n                    );\n\n                    fetch(\"/api/strategy\", {\n                        method: \"POST\",\n                        headers: {\n                            Accept: \"application/json\",\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: JSON.stringify({\n                            fileName: strategyMeta.basename,\n                            value: newValue,\n                        }),\n                    })\n                        .then((res) => {\n                            return res.json();\n                        })\n                        .then((json) => {\n                            if (json.results === true) {\n                                alert(\"saved\");\n                            }\n                        })\n                        .catch(() => {\n                            alert(\"something went wrong\");\n                        });\n                }\n            });\n        }\n    }, [strategyMeta]);\n\n    return (\n        <EditorWrapper ref={rootRef}>\n            <TopBar selectStrategy={selectStrategy} />\n            <EditorSSS>\n                <Editor\n                    language={\n                        strategyMeta\n                            ? // strategyMeta.language is the formatted language name\n                              // TypeScript || JavaScript -> typescript | javascript\n                              strategyMeta.language.toLowerCase()\n                            : \"text\"\n                    }\n                    height=\"100%\"\n                    options={{\n                        readOnly: !strategyMeta,\n                    }}\n                    theme=\"vs-dark\"\n                    value={editorValue}\n                    editorDidMount={editorDidMount}\n                />\n            </EditorSSS>\n            <BottomBar height=\"20px\" meta={strategyMeta} />\n        </EditorWrapper>\n    );\n};\n\nexport default StrategyEditor;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/chart.tsx",["370","371","372","373"],"import { OHLCV } from \"@algotia/core\";\nimport { Component, ContextType, FC } from \"react\";\nimport {\n    ema,\n    CandlestickSeries,\n    Chart,\n    ChartCanvas,\n    discontinuousTimeScaleProviderBuilder,\n    XAxis,\n    YAxis,\n    withSize,\n    withDeviceRatio,\n    WithSizeProps,\n    Annotate,\n    LabelAnnotation,\n    LabelAnnotationProps,\n    OHLCTooltip,\n    LineSeries,\n} from \"react-financial-charts\";\nimport { BacktestContext } from \"./context\";\nimport styled from \"styled-components\";\nimport { Paper } from \"@material-ui/core\";\n\ninterface ChartProps extends WithSizeProps {\n    readonly ratio: number;\n}\n\nconst Wrapper = styled(Paper)`\n    && {\n        height: 100%;\n        width: 100%;\n        box-sizing: border-box;\n    }\n`;\n\nclass ResultChart extends Component<ChartProps> {\n    static contextType = BacktestContext;\n\n    context!: ContextType<typeof BacktestContext>;\n\n    private readonly margin = { left: 0, right: 40, top: 0, bottom: 24 };\n\n    private readonly xScaleProvider = discontinuousTimeScaleProviderBuilder().inputDateAccessor(\n        (d: OHLCV) => new Date(d.timestamp)\n    );\n\n    private readonly buyAnnotation: Omit<LabelAnnotationProps, \"plotData\"> = {\n        rotate: 90,\n        text: ({ timestamp }: OHLCV) => {\n            if (this.context.requestResult) {\n                const order = this.context.requestResult.results.closedOrders.find(\n                    (order) => order.timestamp === timestamp\n                );\n                if (order) return order.side;\n            }\n            return \"\";\n        },\n        tooltip: \"yeet\",\n        fill: ({ timestamp }: OHLCV) => {\n            if (this.context.requestResult) {\n                const order = this.context.requestResult.results.closedOrders.find(\n                    (order) => order.timestamp === timestamp\n                );\n                if (order) return order.side === \"buy\" ? \"green\" : \"red\";\n            }\n            return \"#000\";\n        },\n        y: ({ yScale, datum }: any) => {\n            const order = this.context.requestResult?.results.closedOrders.find(\n                (order) => order.timestamp == datum.timestamp\n            );\n            if (order?.side === \"buy\") {\n                return yScale(datum.high) - 20;\n            } else {\n                return yScale(datum.low) + 20;\n            }\n        },\n    };\n\n    public render() {\n        const { height, width } = this.props;\n\n        const annotationDates = (data: OHLCV) => {\n            return Boolean(\n                this.context.requestResult?.results.closedOrders.find(\n                    (order) => order.timestamp === data.timestamp\n                )\n            );\n        };\n\n        const {\n            data,\n            xScale,\n            xAccessor,\n            displayXAccessor,\n        } = this.xScaleProvider(this.context.requestResult?.candles || []);\n\n        const max = xAccessor(data[data.length - 1]);\n        const min = xAccessor(data[Math.max(0, data.length - 100)]);\n        const xExtents = [min, max];\n\n        return (\n            <Wrapper>\n                <ChartCanvas\n                    height={height - 4}\n                    width={width - 4}\n                    ratio={1}\n                    margin={this.margin}\n                    data={data}\n                    displayXAccessor={displayXAccessor}\n                    seriesName=\"Data\"\n                    xScale={xScale}\n                    xAccessor={xAccessor}\n                    xExtents={xExtents}\n                >\n                    <Chart id={1} yExtents={this.yExtents}>\n                        <XAxis showGridLines={true} />\n                        <YAxis showGridLines={true} />\n                        <Annotate\n                            with={LabelAnnotation}\n                            usingProps={this.buyAnnotation}\n                            when={annotationDates}\n                        />\n                        <CandlestickSeries />\n                        {data.length && (\n                            <OHLCTooltip\n                                ohlcFormat={(n) => {\n                                    const precision =\n                                        this.context.requestResult?.market\n                                            .precision.quote || 4;\n                                    return n.valueOf().toFixed(precision);\n                                }}\n                                origin={[8, 16]}\n                                textFill={(d) =>\n                                    d.close > d.open ? \"#26a69a\" : \"#ef5350\"\n                                }\n                            />\n                        )}\n                    </Chart>\n                </ChartCanvas>\n            </Wrapper>\n        );\n    }\n\n    private readonly yExtents = (data: OHLCV) => {\n        return [data.high, data.low];\n    };\n}\n\nexport default withSize({ style: { width: \"100%\", height: \"100%\" } })(\n    withDeviceRatio()(ResultChart)\n);\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/editor.tsx",["374","375"],"import React, { FC, MutableRefObject, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { StrategyEditor } from \"../../components/shared\";\n\nconst EditorRoot = styled.div`\n    height: 100%;\n    width: 100%;\n`;\n\nconst Editor: FC<{ setStraegyPath: (path: string) => void }> = (props) => {\n    const { setStraegyPath } = props;\n\n    const rootRef = useRef<any>();\n\n    return (\n        <EditorRoot ref={rootRef}>\n            <StrategyEditor\n                rootRef={rootRef}\n                onStrategySelected={(strategy) => {\n                    setStraegyPath(strategy.path);\n                }}\n            />\n        </EditorRoot>\n    );\n};\n\nexport default Editor;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/defaultValue.ts",["376"],"const defaultValue1 = `\n   █████████   █████         █████████     ███████    ███████████ █████   █████████  \n  ███░░░░░███ ░░███         ███░░░░░███  ███░░░░░███ ░█░░░███░░░█░░███   ███░░░░░███ \n ░███    ░███  ░███        ███     ░░░  ███     ░░███░   ░███  ░  ░███  ░███    ░███ \n ░███████████  ░███       ░███         ░███      ░███    ░███     ░███  ░███████████ \n ░███░░░░░███  ░███       ░███    █████░███      ░███    ░███     ░███  ░███░░░░░███ \n ░███    ░███  ░███      █░░███  ░░███ ░░███     ███     ░███     ░███  ░███    ░███ \n █████   █████ ███████████ ░░█████████  ░░░███████░      █████    █████ █████   █████\n░░░░░   ░░░░░ ░░░░░░░░░░░   ░░░░░░░░░     ░░░░░░░       ░░░░░    ░░░░░ ░░░░░   ░░░░░ \n\n~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ +-+-+-+-+-+-+ +-+ +-+-+-+-+-+-+-+-+ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |C|H|O|O|S|E| |A| |S|T|R|A|T|E|G|Y| ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ +-+-+-+-+-+-+ +-+ +-+-+-+-+-+-+-+-+ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n\n`;\n\nconst defaultValue = `\n// Choose a strategy\n`;\n\nexport default defaultValue;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/topBar.tsx",["377"],"import { MenuItem, Select, Button, FormControl } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { FC, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Row } from \"../utils\";\nimport NewStrategyModal from \"./newStrategyModal\";\nimport { DefaultApi, StrategyMetaData } from \"@algotia/client\";\n\nconst BarWrapper = styled(Row)`\n    height: 35px;\n    width: 100%;\n    background-color: #444;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    padding: 5px;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    box-sizing: border-box;\n`;\n\n//TODO: import StrategyData from server types\n\nconst useButtonStyles = makeStyles({\n    root: {\n        height: \"25px\",\n        width: \"45px\",\n        backgroundColor: \"#72a56f\",\n        position: \"absolute\",\n        right: \"15px\",\n    },\n});\n\nconst TopBar: FC<{\n    selectStrategy: (data: StrategyMetaData) => void;\n}> = ({ selectStrategy }) => {\n    const [allStrategies, setAllStrategies] = useState<StrategyMetaData[]>();\n    const [selectVal, setSelectVal] = useState(\"\");\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const buttonClasses = useButtonStyles();\n\n    const client = new DefaultApi();\n\n    useEffect(() => {\n        client.getAllStrategyMetaData().then((res) => {\n            setAllStrategies(res.data);\n        });\n    }, []);\n\n    const onNewStrategyClick = () => {\n        setModalOpen(true);\n    };\n\n    // const onNewStrategy = (fileName: string) => {\n    //     fetch(\"/api/strategy\", {\n    //         method: \"POST\",\n    //         headers: {\n    //             Accept: \"application/json\",\n    //             \"Content-Type\": \"application/json\",\n    //         },\n    //         body: JSON.stringify({\n    //             fileName,\n    //             value: \"\",\n    //         }),\n    //     })\n    //         .then((res) => res.json())\n    //         .then((json) => {\n    //             if (json && !json.errors) {\n    //                 fetch(\"/api/strategy\")\n    //                     .then((res) => res.json())\n    //                     .then((json) => {\n    //                         if (json.strategies) {\n    //                             setAllStrategies(json.strategies);\n    //                             setModalOpen(false);\n    //                         }\n    //                     })\n    //                     .catch((err) => {\n    //                         alert(err.message);\n    //                     });\n    //             }\n    //         })\n    //         .catch((err) => {\n    //             alert(err.message);\n    //         });\n    // };\n\n    return (\n        <BarWrapper>\n            <NewStrategyModal\n                modalOpen={modalOpen}\n                setModalOpen={setModalOpen}\n                onNewStrategy={() => {}}\n            />\n            <FormControl margin=\"dense\">\n                <Select id=\"strategy-selector\" displayEmpty value={selectVal}>\n                    <MenuItem value=\"\">Strategy</MenuItem>\n                    {allStrategies &&\n                        allStrategies.map((data) => {\n                            return (\n                                <MenuItem\n                                    key={\"select-file-\" + data.basename}\n                                    value={data.basename}\n                                    onClick={() => {\n                                        setSelectVal(data.basename);\n                                        selectStrategy(data);\n                                    }}\n                                >\n                                    {data.basename}\n                                </MenuItem>\n                            );\n                        })}\n                </Select>\n            </FormControl>\n            <Button classes={buttonClasses} onClick={onNewStrategyClick}>\n                New\n            </Button>\n        </BarWrapper>\n    );\n};\n\nexport default TopBar;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/results.tsx",["378","379","380","381","382"],"import { Dispatch, FC, SetStateAction, useContext, useState } from \"react\";\nimport { Column } from \"../../../components\";\nimport { BacktestResults, OHLCV_Candle } from \"@algotia/core\";\nimport {\n    Button,\n    ButtonGroup,\n    makeStyles,\n    Paper,\n    Tab,\n    Tabs,\n    Toolbar,\n} from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { BacktestContext } from \"../context\";\nimport Balance from \"./balance\";\nimport ClosedOrders from \"./closedOrders\";\nimport Errors from \"./errors\";\nimport OpenOrders from \"./openOrders\";\n\nconst ResultsTableWrapper = styled(Paper)`\n    height: 100%;\n    width: 100%;\n`;\n\nconst Header = styled(Toolbar)`\n    height: 50px;\n    width: 100%;\n    display: flex;\n    box-sizing: border-box;\n    padding: 5px 0;\n    justify-content: center;\n    align-items: space-around;\n`;\n\nconst useTabsStyles = makeStyles({\n    root: {\n        width: \"auto\",\n    },\n});\n\nconst TableBody = styled(Column)`\n    height: 100%;\n    width: calc(100% - 30px);\n    margin: 0 auto;\n`;\n\nconst Results: FC = () => {\n    const { requestResult } = useContext(BacktestContext);\n\n    const allGroups: [keyof BacktestResults, string][] = [\n        [\"balance\", \"balance\"],\n        [\"closedOrders\", \"closed orders\"],\n        [\"openOrders\", \"open orders\"],\n        [\"errors\", \"errors\"],\n    ];\n\n    const [activeGroup, setActiveGroup] = useState<keyof BacktestResults>(\n        allGroups[0][0]\n    );\n\n    const tabClasses = useTabsStyles();\n\n    return (\n        <ResultsTableWrapper>\n            <Header>\n                <ButtonGroup>\n                    {allGroups.map(([resultKey, label]) => {\n                        if (requestResult?.results) {\n                            label =\n                                resultKey === \"balance\"\n                                    ? resultKey\n                                    : label +\n                                      \" (\" +\n                                      requestResult.results[resultKey].length +\n                                      \")\";\n                            return (\n                                <Button\n                                    className={tabClasses.root}\n                                    onClick={() => {\n                                        setActiveGroup(resultKey);\n                                    }}\n                                >\n                                    {label}\n                                </Button>\n                            );\n                        } else {\n                            return (\n                                <Button\n                                    className={tabClasses.root}\n                                    onClick={() => {\n                                        setActiveGroup(resultKey);\n                                    }}\n                                >\n                                    {label}\n                                </Button>\n                            );\n                        }\n                    })}\n                </ButtonGroup>\n            </Header>\n            <TableBody>\n                {activeGroup === \"balance\" && <Balance />}\n                {activeGroup === \"closedOrders\" && <ClosedOrders />}\n                {activeGroup === \"openOrders\" && <OpenOrders />}\n                {activeGroup === \"errors\" && <Errors />}\n            </TableBody>\n        </ResultsTableWrapper>\n    );\n};\nexport default Results;\n// <Tabs\n//     onChange={handleGroupChange}\n//     value={activeGroup}\n//     scrollButtons=\"auto\"\n// >\n// </Tabs>\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/index.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/openOrders.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/errors.tsx",["383","384","385"],"import { BacktestResults, OHLCV_Candle, parsePair } from \"@algotia/core\";\nimport { FC, useContext } from \"react\";\nimport { BacktestContext } from \"../context\";\nimport { ColDef, DataGrid } from \"@material-ui/data-grid\";\n\nconst columns: ColDef[] = [\n    { field: \"id\", headerName: \"ID\", width: 70 },\n    { field: \"at\", headerName: \"At\", flex: 1 },\n    { field: \"message\", headerName: \"Message\", flex: 2 },\n];\n\nconst Errors: FC = () => {\n    const { requestResult } = useContext(BacktestContext);\n\n    const rows = requestResult?.results.errors.map((error, i) => {\n        const { timestamp, message } = error;\n        return {\n            id: i,\n            message,\n            at: new Date(timestamp),\n        };\n    });\n\n    return (\n        <DataGrid\n            rows={rows || []}\n            columns={columns}\n            density=\"compact\"\n            disableSelectionOnClick={true}\n            rowsPerPageOptions={[100]}\n        />\n    );\n};\n\nexport default Errors;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/form.tsx",["386","387","388","389"],"import {\n    useEffect,\n    useState,\n    FC,\n    Dispatch,\n    SetStateAction,\n    useContext,\n    ReactText,\n} from \"react\";\nimport styled from \"styled-components\";\nimport { parsePair, parsePeriod } from \"@algotia/core\";\nimport { Button, Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Row } from \"../../../components/shared\";\nimport { BacktestContext } from \"../context\";\nimport SelectExchange from \"./selectExchange\";\nimport SelectDate from \"./selectDates\";\nimport SelectInitialBalance from \"./selectInitialBalance\";\nimport SelectPair from \"./selectPair\";\nimport SelectPeriod from \"./selectPeriod\";\nimport {\n    DefaultApi,\n    ExchangeID,\n    Currency,\n    CreateBacktestOptions,\n} from \"@algotia/client\";\n\nconst FormWrapper = styled.div`\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    background-color: #ffffff;\n    position: relative;\n    box-sizing: border-box;\n`;\n\nconst FormBody = styled(Paper)`\n    && {\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: space-evenly;\n    }\n`;\n\nconst FormItem = styled(Row)`\n    width: 45%;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst RowItem = styled(FormItem)`\n    width: 80%;\n    justify-content: space-between;\n`;\n\nconst useStyles = makeStyles({\n    root: {\n        height: \"50px\",\n        width: \"100px\",\n        fontSize: \"20px\",\n        boxSizing: \"border-box\",\n    },\n    primary: {\n        backgroundColor: \"#20ad16\",\n    },\n    disabled: {\n        backgroundColor: \"grey\",\n    },\n});\n\nconst Form: FC<{\n    setOptions: Dispatch<\n        SetStateAction<Omit<CreateBacktestOptions, \"strategyPath\"> | undefined>\n    >;\n}> = (props) => {\n    const [pairList, setPairList] = useState<string[]>();\n    const [periodList, setTimeframeList] = useState<\n        Record<string, ReactText>\n    >();\n    const [currencyList, setCurrencyList] = useState<\n        Record<string, Currency>\n    >();\n\n    let now = new Date();\n\n    now.setHours(0, 0, 0);\n\n    now.setMilliseconds(0);\n\n    const initialTo = new Date(now);\n\n    now.setMonth(now.getMonth() - 1);\n\n    const initialFrom = new Date(now);\n\n    const [exchangeId, setExchangeId] = useState<ExchangeID>(\"\" as ExchangeID);\n    const [pair, setPair] = useState(\"\");\n    const [period, setPeriod] = useState<string>(\"\");\n    const [to, setTo] = useState<Date>(initialTo);\n    const [from, setFrom] = useState<Date>(initialFrom);\n    const [baseCurrency, setBaseCurrency] = useState(\"\");\n    const [quoteCurrency, setQuoteCurrency] = useState(\"\");\n    const [baseAmount, setBaseAmount] = useState(0);\n    const [quoteAmount, setQuoteAmount] = useState(0);\n\n    const [canRun, setCanRun] = useState(false);\n\n    useEffect(() => {\n        if (pair) {\n            const [base, quote] = parsePair(pair);\n            setBaseCurrency(base);\n            setBaseAmount(0);\n            setQuoteCurrency(quote);\n            setQuoteAmount(0);\n        }\n    }, [pair]);\n\n    const client = new DefaultApi();\n\n    useEffect(() => {\n        if (exchangeId) {\n            client.getCurrencies(exchangeId).then((res) => {\n                setCurrencyList(res.data);\n            });\n            client.getPairs(exchangeId).then((res) => {\n                setPairList(res.data);\n            });\n            client.getTimeFrames(exchangeId).then((res) => {\n                setTimeframeList(res.data);\n            });\n            setPair(\"\");\n            setPeriod(\"\");\n        }\n    }, [exchangeId]);\n\n    useEffect(() => {\n        if (to && from && pair && period) {\n            setCanRun(true);\n        }\n    }, [to, from, pair, period]);\n\n    const classes = useStyles();\n\n    const buttonClasses = `${classes.root} ${\n        (canRun && classes.primary) || classes.disabled\n    }`;\n\n    const run = () => {\n        if (exchangeId && to && from && period && pair) {\n            const body = {\n                exchange: exchangeId,\n                to: new Date(to.toUTCString()).getTime(),\n                from: new Date(from.toUTCString()).getTime(),\n                pair: pair,\n                period,\n                initialBalance: {\n                    [baseCurrency]: baseAmount,\n                    [quoteCurrency]: quoteAmount,\n                },\n            };\n            props.setOptions(body);\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <FormBody>\n                <FormItem>\n                    <SelectExchange\n                        exchangeId={exchangeId}\n                        setExchangeId={setExchangeId}\n                    />\n                </FormItem>\n                <RowItem>\n                    <FormItem>\n                        <SelectDate\n                            exchangeId={exchangeId}\n                            setDate={setFrom}\n                            date={from}\n                            label=\"From\"\n                            minDate={new Date(\"01/01/2015\")}\n                        />\n                    </FormItem>\n\n                    <FormItem>\n                        <SelectDate\n                            exchangeId={exchangeId}\n                            setDate={setTo}\n                            date={to}\n                            label=\"To\"\n                            minDate={new Date(from ? from : \"01/01/2015\")}\n                        />\n                    </FormItem>\n                </RowItem>\n                <RowItem>\n                    <FormItem>\n                        <SelectPair\n                            pairList={pairList}\n                            setPair={setPair}\n                            pair={pair}\n                        />\n                    </FormItem>\n                    <FormItem>\n                        <SelectPeriod\n                            period={period}\n                            setPeriod={setPeriod}\n                            periodList={periodList}\n                        />\n                    </FormItem>\n                </RowItem>\n                <RowItem>\n                    <SelectInitialBalance\n                        id=\"base\"\n                        currency={baseCurrency}\n                        setCurrency={setBaseCurrency}\n                        amount={baseAmount}\n                        setAmount={setBaseAmount}\n                        pair={pair}\n                        FormItem={FormItem}\n                        currencyList={currencyList}\n                        onChange={({ amount }) => {\n                            setBaseAmount(amount);\n                        }}\n                    />\n                </RowItem>\n                <RowItem>\n                    <SelectInitialBalance\n                        FormItem={FormItem}\n                        id=\"quote\"\n                        currency={quoteCurrency}\n                        setCurrency={setQuoteCurrency}\n                        amount={quoteAmount}\n                        setAmount={setQuoteAmount}\n                        pair={pair}\n                        currencyList={currencyList}\n                        onChange={({ amount }) => {\n                            setQuoteAmount(amount);\n                        }}\n                    />\n                </RowItem>\n                <FormItem>\n                    <Button\n                        disabled={!canRun}\n                        className={buttonClasses}\n                        onClick={run}\n                    >\n                        Run\n                    </Button>\n                </FormItem>\n            </FormBody>\n        </FormWrapper>\n    );\n};\n\nexport default Form;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/closedOrders.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/results/balance.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPeriod.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectInitialBalance.tsx",["390"],"import { Currency } from \"@algotia/client\";\nimport { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\";\n\ninterface SelectInitialBalanceProps {\n    id: string;\n    pair: string;\n    currency: string;\n    setCurrency: Dispatch<SetStateAction<string>>;\n    amount: number;\n    setAmount: Dispatch<SetStateAction<number>>;\n    currencyList: Record<string, Currency> | undefined;\n    onChange: (value: { currency: string; amount: number }) => void;\n    FormItem: FC;\n}\n\nconst SelectInitialBalance: FC<SelectInitialBalanceProps> = (props) => {\n    const {\n        id,\n        pair,\n        currencyList,\n        FormItem,\n        currency,\n        setCurrency,\n        amount,\n        setAmount,\n    } = props;\n    const [error, setError] = useState(false);\n\n    return (\n        <>\n            <FormItem>\n                <Autocomplete\n                    id={id + \"-autocomplete\"}\n                    fullWidth={true}\n                    disabled={!pair}\n                    options={Object.keys(currencyList || {})}\n                    getOptionLabel={(c) => c}\n                    value={currency}\n                    onChange={(_, val) => {\n                        setCurrency(val || \"\");\n                    }}\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            label=\"Select a currency\"\n                            variant=\"standard\"\n                        />\n                    )}\n                />\n            </FormItem>\n            <FormItem>\n                <TextField\n                    id={id + \"-text-field\"}\n                    disabled={!pair}\n                    fullWidth={true}\n                    label={\"Amount\"}\n                    value={amount}\n                    error={typeof amount === \"string\"}\n                    onChange={(e) => {\n                        let val: string | number = e.target.value;\n                        if (!isNaN(Number(val))) {\n                            error && setError(false);\n                            val = Number(val);\n                            setAmount(val);\n                        } else {\n                            setError(true);\n                        }\n                    }}\n                />\n            </FormItem>\n        </>\n    );\n};\n\nexport default SelectInitialBalance;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectExchange.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectDates.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/backtest/form/selectPair.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/layout/index.ts",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/index.js",["391"],"\nimport ccxt from \"./ccxt\" \nimport _assert from \"./_assert\" \nimport _async_hooks from \"./_async_hooks\" \nimport _base from \"./_base\" \nimport _buffer from \"./_buffer\" \nimport _child_process from \"./_child_process\" \nimport _cluster from \"./_cluster\" \nimport _console from \"./_console\" \nimport _constants from \"./_constants\" \nimport _crypto from \"./_crypto\" \nimport _dgram from \"./_dgram\" \nimport _dns from \"./_dns\" \nimport _domain from \"./_domain\" \nimport _events from \"./_events\" \nimport _fs from \"./_fs\" \nimport _globals from \"./_globals\" \nimport _globals_global from \"./_globals_global\" \nimport _http from \"./_http\" \nimport _http2 from \"./_http2\" \nimport _https from \"./_https\" \nimport _index from \"./_index\" \nimport _inspector from \"./_inspector\" \nimport _module from \"./_module\" \nimport _net from \"./_net\" \nimport _os from \"./_os\" \nimport _path from \"./_path\" \nimport _perf_hooks from \"./_perf_hooks\" \nimport _process from \"./_process\" \nimport _punycode from \"./_punycode\" \nimport _querystring from \"./_querystring\" \nimport _readline from \"./_readline\" \nimport _repl from \"./_repl\" \nimport _stream from \"./_stream\" \nimport _string_decoder from \"./_string_decoder\" \nimport _timers from \"./_timers\" \nimport _tls from \"./_tls\" \nimport _trace_events from \"./_trace_events\" \nimport _tty from \"./_tty\" \nimport _url from \"./_url\" \nimport _util from \"./_util\" \nimport _v8 from \"./_v8\" \nimport _vm from \"./_vm\" \nimport _wasi from \"./_wasi\" \nimport _worker_threads from \"./_worker_threads\" \nimport _zlib from \"./_zlib\" \n\n\nexport default {\n\t'ccxt': ccxt,'assert': _assert,'async_hooks': _async_hooks,'base': _base,'buffer': _buffer,'child_process': _child_process,'cluster': _cluster,'console': _console,'constants': _constants,'crypto': _crypto,'dgram': _dgram,'dns': _dns,'domain': _domain,'events': _events,'fs': _fs,'globals': _globals,'globals.global': _globals_global,'http': _http,'http2': _http2,'https': _https,'index': _index,'inspector': _inspector,'module': _module,'net': _net,'os': _os,'path': _path,'perf_hooks': _perf_hooks,'process': _process,'punycode': _punycode,'querystring': _querystring,'readline': _readline,'repl': _repl,'stream': _stream,'string_decoder': _string_decoder,'timers': _timers,'tls': _tls,'trace_events': _trace_events,'tty': _tty,'url': _url,'util': _util,'v8': _v8,'vm': _vm,'wasi': _wasi,'worker_threads': _worker_threads,'zlib': _zlib,\n}\n",["392","393"],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_assert.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_base.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_async_hooks.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/ccxt.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_buffer.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_console.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_child_process.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_cluster.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dgram.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_constants.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_dns.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_domain.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_events.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_crypto.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals_global.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_https.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_index.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_globals.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_net.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_os.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_module.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_path.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_perf_hooks.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_process.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_punycode.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_querystring.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_http2.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_readline.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_repl.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_stream.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_timers.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_string_decoder.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_trace_events.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tty.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_url.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_tls.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_fs.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_v8.js",["394"],"\n// This file is automatically generated. Do not edit it.\n\nconst _v8 = \"declare module \\\"v8\\\" {\\n    import { Readable } from \\\"stream\\\";\\n\\n    interface HeapSpaceInfo {\\n        space_name: string;\\n        space_size: number;\\n        space_used_size: number;\\n        space_available_size: number;\\n        physical_space_size: number;\\n    }\\n\\n    // ** Signifies if the --zap_code_space option is enabled or not.  1 == enabled, 0 == disabled. */\\n    type DoesZapCodeSpaceFlag = 0 | 1;\\n\\n    interface HeapInfo {\\n        total_heap_size: number;\\n        total_heap_size_executable: number;\\n        total_physical_size: number;\\n        total_available_size: number;\\n        used_heap_size: number;\\n        heap_size_limit: number;\\n        malloced_memory: number;\\n        peak_malloced_memory: number;\\n        does_zap_garbage: DoesZapCodeSpaceFlag;\\n        number_of_native_contexts: number;\\n        number_of_detached_contexts: number;\\n    }\\n\\n    interface HeapCodeStatistics {\\n        code_and_metadata_size: number;\\n        bytecode_and_metadata_size: number;\\n        external_script_source_size: number;\\n    }\\n\\n    /**\\n     * Returns an integer representing a \\\"version tag\\\" derived from the V8 version, command line flags and detected CPU features.\\n     * This is useful for determining whether a vm.Script cachedData buffer is compatible with this instance of V8.\\n     */\\n    function cachedDataVersionTag(): number;\\n\\n    function getHeapStatistics(): HeapInfo;\\n    function getHeapSpaceStatistics(): HeapSpaceInfo[];\\n    function setFlagsFromString(flags: string): void;\\n    /**\\n     * Generates a snapshot of the current V8 heap and returns a Readable\\n     * Stream that may be used to read the JSON serialized representation.\\n     * This conversation was marked as resolved by joyeecheung\\n     * This JSON stream format is intended to be used with tools such as\\n     * Chrome DevTools. The JSON schema is undocumented and specific to the\\n     * V8 engine, and may change from one version of V8 to the next.\\n     */\\n    function getHeapSnapshot(): Readable;\\n\\n    /**\\n     *\\n     * @param fileName The file path where the V8 heap snapshot is to be\\n     * saved. If not specified, a file name with the pattern\\n     * `'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot'` will be\\n     * generated, where `{pid}` will be the PID of the Node.js process,\\n     * `{thread_id}` will be `0` when `writeHeapSnapshot()` is called from\\n     * the main Node.js thread or the id of a worker thread.\\n     */\\n    function writeHeapSnapshot(fileName?: string): string;\\n\\n    function getHeapCodeStatistics(): HeapCodeStatistics;\\n\\n    /**\\n     * @experimental\\n     */\\n    class Serializer {\\n        /**\\n         * Writes out a header, which includes the serialization format version.\\n         */\\n        writeHeader(): void;\\n\\n        /**\\n         * Serializes a JavaScript value and adds the serialized representation to the internal buffer.\\n         * This throws an error if value cannot be serialized.\\n         */\\n        writeValue(val: any): boolean;\\n\\n        /**\\n         * Returns the stored internal buffer.\\n         * This serializer should not be used once the buffer is released.\\n         * Calling this method results in undefined behavior if a previous write has failed.\\n         */\\n        releaseBuffer(): Buffer;\\n\\n        /**\\n         * Marks an ArrayBuffer as having its contents transferred out of band.\\\\\\n         * Pass the corresponding ArrayBuffer in the deserializing context to deserializer.transferArrayBuffer().\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n\\n        /**\\n         * Write a raw 32-bit unsigned integer.\\n         */\\n        writeUint32(value: number): void;\\n\\n        /**\\n         * Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.\\n         */\\n        writeUint64(hi: number, lo: number): void;\\n\\n        /**\\n         * Write a JS number value.\\n         */\\n        writeDouble(value: number): void;\\n\\n        /**\\n         * Write raw bytes into the serializer’s internal buffer.\\n         * The deserializer will require a way to compute the length of the buffer.\\n         */\\n        writeRawBytes(buffer: NodeJS.TypedArray): void;\\n    }\\n\\n    /**\\n     * A subclass of `Serializer` that serializes `TypedArray` (in particular `Buffer`) and `DataView` objects as host objects,\\n     * and only stores the part of their underlying `ArrayBuffers` that they are referring to.\\n     * @experimental\\n     */\\n    class DefaultSerializer extends Serializer {\\n    }\\n\\n    /**\\n     * @experimental\\n     */\\n    class Deserializer {\\n        constructor(data: NodeJS.TypedArray);\\n        /**\\n         * Reads and validates a header (including the format version).\\n         * May, for example, reject an invalid or unsupported wire format.\\n         * In that case, an Error is thrown.\\n         */\\n        readHeader(): boolean;\\n\\n        /**\\n         * Deserializes a JavaScript value from the buffer and returns it.\\n         */\\n        readValue(): any;\\n\\n        /**\\n         * Marks an ArrayBuffer as having its contents transferred out of band.\\n         * Pass the corresponding `ArrayBuffer` in the serializing context to serializer.transferArrayBuffer()\\n         * (or return the id from serializer._getSharedArrayBufferId() in the case of SharedArrayBuffers).\\n         */\\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\\n\\n        /**\\n         * Reads the underlying wire format version.\\n         * Likely mostly to be useful to legacy code reading old wire format versions.\\n         * May not be called before .readHeader().\\n         */\\n        getWireFormatVersion(): number;\\n\\n        /**\\n         * Read a raw 32-bit unsigned integer and return it.\\n         */\\n        readUint32(): number;\\n\\n        /**\\n         * Read a raw 64-bit unsigned integer and return it as an array [hi, lo] with two 32-bit unsigned integer entries.\\n         */\\n        readUint64(): [number, number];\\n\\n        /**\\n         * Read a JS number value.\\n         */\\n        readDouble(): number;\\n\\n        /**\\n         * Read raw bytes from the deserializer’s internal buffer.\\n         * The length parameter must correspond to the length of the buffer that was passed to serializer.writeRawBytes().\\n         */\\n        readRawBytes(length: number): Buffer;\\n    }\\n\\n    /**\\n     * A subclass of `Serializer` that serializes `TypedArray` (in particular `Buffer`) and `DataView` objects as host objects,\\n     * and only stores the part of their underlying `ArrayBuffers` that they are referring to.\\n     * @experimental\\n     */\\n    class DefaultDeserializer extends Deserializer {\\n    }\\n\\n    /**\\n     * Uses a `DefaultSerializer` to serialize value into a buffer.\\n     * @experimental\\n     */\\n    function serialize(value: any): Buffer;\\n\\n    /**\\n     * Uses a `DefaultDeserializer` with default options to read a JS value from a buffer.\\n     * @experimental\\n     */\\n    function deserialize(data: NodeJS.TypedArray): any;\\n}\\n\"\n\nexport default _v8\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_util.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_wasi.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_vm.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_zlib.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_worker_threads.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/assets/editor_types/_inspector.js",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/newStrategyModal.tsx",["395","396"],"import {DefaultApi} from \"@algotia/client\";\nimport { Button, makeStyles, Modal, TextField } from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { Dispatch, FC, SetStateAction, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst ModalContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst ModalBody = styled.div`\n    width: 30%;\n    height: 30%;\n    background-color: #fff;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    padding: 15px;\n`;\n\nconst useCloseModalButtonStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        top: \"15px\",\n        right: \"15px\",\n        margin: \"0 auto\",\n        cursor: \"pointer\",\n    },\n});\n\nconst useSubmitButtonStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        backgroundColor: \"green\",\n    },\n});\n\nconst NewStrategyModal: FC<{\n    modalOpen: boolean;\n    setModalOpen: Dispatch<SetStateAction<boolean>>;\n    onNewStrategy: (fileName: string) => void;\n}> = ({ modalOpen, setModalOpen, onNewStrategy }) => {\n    const [fileName, setFileName] = useState(\"\");\n    const [strategyDir, setStrategyDir] = useState<string>();\n\n    const closeModalClasses = useCloseModalButtonStyles();\n    const submitButtonClasses = useSubmitButtonStyles();\n\n\tconst client = new DefaultApi()\n\n    useEffect(() => {\n\n    }, []);\n\n    const onSubmit = () => {\n\n    };\n\n    return (\n        <Modal open={modalOpen}>\n            <ModalContainer>\n                {strategyDir ? (\n                    <ModalBody>\n                        <Close\n                            className={closeModalClasses.root}\n                            onClick={() => {\n                                setModalOpen(false);\n                            }}\n                        />\n                        <TextField\n                            id={\"new-strategy-text-field\"}\n                            label={\"Path\"}\n                            value={fileName}\n                            onChange={(e) => {\n                                let val: string = e.target.value;\n                                if (val.includes(strategyDir)) {\n                                    setFileName(val);\n                                }\n                            }}\n                        />\n                        <Button\n                            classes={submitButtonClasses}\n                            onClick={onSubmit}\n                        >\n                            Submit\n                        </Button>\n                    </ModalBody>\n                ) : (\n                    <div />\n                )}\n            </ModalContainer>\n        </Modal>\n    );\n};\n\nexport default NewStrategyModal;\n","/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/components/shared/strategyEditor/bottomBar.tsx",[],"/home/jake/Documents/Code/algotia-mono/packages/web-ui/src/pages/docs/index.tsx",[],{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","severity":1,"message":"402","line":9,"column":7,"nodeType":"403","messageId":"404","endLine":9,"endColumn":12},{"ruleId":"401","severity":1,"message":"405","line":79,"column":11,"nodeType":"403","messageId":"404","endLine":79,"endColumn":16},{"ruleId":"406","severity":1,"message":"407","line":73,"column":13,"nodeType":"408","messageId":"409","endLine":73,"endColumn":39},{"ruleId":"410","severity":1,"message":"411","line":80,"column":8,"nodeType":"412","endLine":80,"endColumn":10,"suggestions":"413"},{"ruleId":"414","severity":1,"message":"415","line":98,"column":51,"nodeType":"416","messageId":"417","endLine":98,"endColumn":53},{"ruleId":"410","severity":1,"message":"418","line":74,"column":8,"nodeType":"412","endLine":74,"endColumn":17,"suggestions":"419"},{"ruleId":"401","severity":1,"message":"420","line":3,"column":18,"nodeType":"403","messageId":"404","endLine":3,"endColumn":27},{"ruleId":"401","severity":1,"message":"421","line":3,"column":29,"nodeType":"403","messageId":"404","endLine":3,"endColumn":44},{"ruleId":"410","severity":1,"message":"422","line":116,"column":8,"nodeType":"412","endLine":116,"endColumn":22,"suggestions":"423"},{"ruleId":"401","severity":1,"message":"424","line":2,"column":34,"nodeType":"403","messageId":"404","endLine":2,"endColumn":36},{"ruleId":"401","severity":1,"message":"425","line":4,"column":5,"nodeType":"403","messageId":"404","endLine":4,"endColumn":8},{"ruleId":"401","severity":1,"message":"426","line":18,"column":5,"nodeType":"403","messageId":"404","endLine":18,"endColumn":15},{"ruleId":"427","severity":1,"message":"428","line":70,"column":44,"nodeType":"429","messageId":"430","endLine":70,"endColumn":46},{"ruleId":"401","severity":1,"message":"431","line":1,"column":21,"nodeType":"403","messageId":"404","endLine":1,"endColumn":37},{"ruleId":"401","severity":1,"message":"432","line":1,"column":47,"nodeType":"403","messageId":"404","endLine":1,"endColumn":55},{"ruleId":"401","severity":1,"message":"433","line":1,"column":7,"nodeType":"403","messageId":"404","endLine":1,"endColumn":20},{"ruleId":"410","severity":1,"message":"434","line":49,"column":8,"nodeType":"412","endLine":49,"endColumn":10,"suggestions":"435"},{"ruleId":"401","severity":1,"message":"436","line":1,"column":10,"nodeType":"403","messageId":"404","endLine":1,"endColumn":18},{"ruleId":"401","severity":1,"message":"437","line":1,"column":24,"nodeType":"403","messageId":"404","endLine":1,"endColumn":38},{"ruleId":"401","severity":1,"message":"438","line":3,"column":27,"nodeType":"403","messageId":"404","endLine":3,"endColumn":39},{"ruleId":"401","severity":1,"message":"439","line":9,"column":5,"nodeType":"403","messageId":"404","endLine":9,"endColumn":8},{"ruleId":"401","severity":1,"message":"440","line":10,"column":5,"nodeType":"403","messageId":"404","endLine":10,"endColumn":9},{"ruleId":"401","severity":1,"message":"441","line":1,"column":10,"nodeType":"403","messageId":"404","endLine":1,"endColumn":25},{"ruleId":"401","severity":1,"message":"438","line":1,"column":27,"nodeType":"403","messageId":"404","endLine":1,"endColumn":39},{"ruleId":"401","severity":1,"message":"442","line":1,"column":41,"nodeType":"403","messageId":"404","endLine":1,"endColumn":50},{"ruleId":"401","severity":1,"message":"443","line":7,"column":5,"nodeType":"403","messageId":"404","endLine":7,"endColumn":15},{"ruleId":"401","severity":1,"message":"444","line":11,"column":21,"nodeType":"403","messageId":"404","endLine":11,"endColumn":32},{"ruleId":"401","severity":1,"message":"445","line":15,"column":10,"nodeType":"403","messageId":"404","endLine":15,"endColumn":25},{"ruleId":"410","severity":1,"message":"434","line":131,"column":8,"nodeType":"412","endLine":131,"endColumn":20,"suggestions":"446"},{"ruleId":"401","severity":1,"message":"447","line":4,"column":40,"nodeType":"403","messageId":"404","endLine":4,"endColumn":49},{"ruleId":"448","severity":1,"message":"449","line":49,"column":1,"nodeType":"450","endLine":51,"endColumn":2},{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","replacedBy":"400"},{"ruleId":"451","severity":1,"message":"452","line":4,"column":13,"nodeType":"453","messageId":"454","endLine":4,"endColumn":7142},{"ruleId":"401","severity":1,"message":"455","line":49,"column":25,"nodeType":"403","messageId":"404","endLine":49,"endColumn":39},{"ruleId":"401","severity":1,"message":"456","line":54,"column":8,"nodeType":"403","messageId":"404","endLine":54,"endColumn":14},"no-native-reassign",["457"],"no-negated-in-lhs",["458"],"@typescript-eslint/no-unused-vars","'About' is assigned a value but never used.","Identifier","unusedVar","'theme' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStatus'. Either include it or remove the dependency array.","ArrayExpression",["459"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'client' and 'strategyPath'. Either include them or remove the dependency array.",["460"],"'CSSObject' is defined but never used.","'StyledComponent' is defined but never used.","React Hook useEffect has a missing dependency: 'onStrategySelected'. Either include it or remove the dependency array.",["461"],"'FC' is defined but never used.","'ema' is defined but never used.","'LineSeries' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'MutableRefObject' is defined but never used.","'useState' is defined but never used.","'defaultValue1' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'client'. Either include it or remove the dependency array.",["462"],"'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'OHLCV_Candle' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'BacktestResults' is defined but never used.","'parsePair' is defined but never used.","'useContext' is defined but never used.","'parsePeriod' is defined but never used.","'BacktestContext' is defined but never used.",["463"],"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'setStrategyDir' is assigned a value but never used.","'client' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},"Update the dependencies array to be: [fetchStatus]",{"range":"474","text":"475"},"Update the dependencies array to be: [client, options, strategyPath]",{"range":"476","text":"477"},"Update the dependencies array to be: [onStrategySelected, strategyMeta]",{"range":"478","text":"479"},"Update the dependencies array to be: [client]",{"range":"480","text":"481"},"Update the dependencies array to be: [client, exchangeId]",{"range":"482","text":"483"},[2021,2023],"[fetchStatus]",[2116,2125],"[client, options, strategyPath]",[3954,3968],"[onStrategySelected, strategyMeta]",[1412,1414],"[client]",[3553,3565],"[client, exchangeId]"]
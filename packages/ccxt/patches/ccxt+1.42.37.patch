diff --git a/node_modules/ccxt/ccxt.d.ts b/node_modules/ccxt/ccxt.d.ts
index cfe45fb..ba96d05 100644
--- a/node_modules/ccxt/ccxt.d.ts
+++ b/node_modules/ccxt/ccxt.d.ts
@@ -3,7 +3,7 @@ declare module 'ccxt' {
     /**
      * Represents an associative array of a same type.
      */
-    interface Dictionary<T> {
+    interface IDictionary<T> {
         [key: string]: T;
     }
 
@@ -48,7 +48,7 @@ declare module 'ccxt' {
 
     export interface MinMax {
         min: number;
-        max: number | undefined;
+        max: number | null;
     }
 
     export interface Market {
@@ -157,7 +157,7 @@ declare module 'ccxt' {
         fee: Fee;
     }
 
-    export interface Tickers extends Dictionary<Ticker> {
+    export interface Tickers extends IDictionary<Ticker> {
         info: any;
     }
 
@@ -174,10 +174,11 @@ declare module 'ccxt' {
         total: number;
     }
 
-    export interface PartialBalances extends Dictionary<number> {
+    export interface PartialBalances extends IDictionary<number> {
     }
 
-    export interface Balances extends Dictionary<Balance> {
+    export interface Balances {
+		[key: string]: Balance;
         info: any;
     }
 
@@ -211,7 +212,7 @@ declare module 'ccxt' {
     export type OHLCV = [number, number, number, number, number, number];
 
     /** Request parameters */
-    type Params = Dictionary<string | number>;
+    type Params = IDictionary<string | number>;
 
     export class Exchange {
         constructor(config?: {[key in keyof Exchange]?: Exchange[key]});
@@ -239,8 +240,8 @@ declare module 'ccxt' {
         };
         urls: {
             logo: string;
-            api: string | Dictionary<string>;
-            test: string | Dictionary<string>;
+            api: string | IDictionary<string>;
+            test: string | IDictionary<string>;
             www: string;
             doc: string[];
             api_management?: string;
@@ -285,9 +286,9 @@ declare module 'ccxt' {
         enableRateLimit: boolean;
         countries: string[];
         // set by loadMarkets
-        markets: Dictionary<Market>;
-        marketsById: Dictionary<Market>;
-        currencies: Dictionary<Currency>;
+        markets: IDictionary<Market>;
+        marketsById: IDictionary<Market>;
+        currencies: IDictionary<Currency>;
         ids: string[];
         symbols: string[];
         id: string;
@@ -299,8 +300,8 @@ declare module 'ccxt' {
         verbose: boolean;
         twofa: boolean;// two-factor authentication
         substituteCommonCurrencyCodes: boolean;
-        timeframes: Dictionary<number | string>;
-        has: Dictionary<boolean | 'emulated'>; // https://github.com/ccxt/ccxt/pull/1984
+        timeframes: IDictionary<number | string>;
+        has: IDictionary<boolean | 'emulated'>; // https://github.com/ccxt/ccxt/pull/1984
         balance: object;
         orderbooks: object;
         orders: object;
@@ -361,7 +362,7 @@ declare module 'ccxt' {
         createOrder (symbol: string, type: Order['type'], side: Order['side'], amount: number, price?: number, params?: Params): Promise<Order>;
         decode (str: string): string;
         defaults (): any;
-        defineRestApi (api: any, methodName: any, options?: Dictionary<any>): void;
+        defineRestApi (api: any, methodName: any, options?: IDictionary<any>): void;
         deposit (...args: any): Promise<any>; // TODO: add function signatures
         describe (): any;
         editOrder (id: string, symbol: string, type: Order['type'], side: Order['side'], amount: number, price?: number, params?: Params): Promise<Order>;
@@ -373,7 +374,7 @@ declare module 'ccxt' {
         fetchBalance (params?: Params): Promise<Balances>;
         fetchBidsAsks (symbols?: string[], params?: Params): Promise<any>;
         fetchClosedOrders (symbol?: string, since?: number, limit?: number, params?: Params): Promise<Order[]>;
-        fetchCurrencies (params?: Params): Promise<Dictionary<Currency>>;
+        fetchCurrencies (params?: Params): Promise<IDictionary<Currency>>;
         fetchDepositAddress (currency: string, params?: Params): Promise<DepositAddressResponse>;
         fetchDeposits (currency?: string, since?: number, limit?: number, params?: Params): Promise<Transaction[]>;
         fetchFreeBalance (params?: Params): Promise<PartialBalances>;
@@ -382,7 +383,7 @@ declare module 'ccxt' {
         fetchLedger (...args: any): Promise<any>; // TODO: add function signatures
         fetchMarkets (): Promise<Market[]>;
         fetchMyTrades (symbol?: string, since?: any, limit?: any, params?: Params): Promise<Trade[]>;
-        fetchOHLCV (symbol: string, timeframe?: string, since?: number, limit?: number, params?: Params): Promise<OHLCV[]>;
+        fetchOHLCV (symbol: string, timeframe?: string, since?: number, limit?: number, params?: Params): Promise<OHLCV_Candle[]>;
         fetchOpenOrders (symbol?: string, since?: number, limit?: number, params?: Params): Promise<Order[]>;
         fetchOrder (id: string, symbol: string, params?: Params): Promise<Order>;
         fetchOrderBook (symbol: string, limit?: number, params?: Params): Promise<OrderBook>;
@@ -391,7 +392,7 @@ declare module 'ccxt' {
         fetchOrderStatus (id: string, market: string): Promise<string>;
         fetchStatus (...args: any): Promise<any>; // TODO: add function signatures
         fetchTicker (symbol: string, params?: Params): Promise<Ticker>;
-        fetchTickers (symbols?: string[], params?: Params): Promise<Dictionary<Ticker>>;
+        fetchTickers (symbols?: string[], params?: Params): Promise<IDictionary<Ticker>>;
         fetchTime (params?: Params): Promise<number>;
         fetchTotalBalance (params?: Params): Promise<PartialBalances>;
         fetchTrades (symbol: string, since?: number, limit?: number, params?: Params): Promise<Trade[]>;
@@ -404,7 +405,7 @@ declare module 'ccxt' {
         getMarket (symbol: string): Market;
         initRestRateLimiter (): void;
         iso8601 (timestamp: number | string): string;
-        loadMarkets (reload?: boolean): Promise<Dictionary<Market>>;
+        loadMarkets (reload?: boolean): Promise<IDictionary<Market>>;
         market (symbol: string): Market;
         marketId (symbol: string): string;
         marketIds (symbols: string[]): string[];
@@ -414,7 +415,7 @@ declare module 'ccxt' {
         purgeCachedOrders (timestamp: number): void;
         request (path: string, api?: string, method?: string, params?: Params, headers?: any, body?: any): Promise<any>;
         seconds (): number;
-        setMarkets (markets: Market[], currencies?: Currency[]): Dictionary<Market>;
+        setMarkets (markets: Market[], currencies?: Currency[]): IDictionary<Market>;
         symbol (symbol: string): string;
         withdraw (currency: string, amount: number, address: string, tag?: string, params?: Params): Promise<WithdrawalResponse>;
         YmdHMS (timestamp: string, infix: string) : string;
